{"version":3,"file":"index.cjs.js","sources":["../src/hash.ts","../src/ext.ts","../src/common.ts","../src/decode.ts","../src/encode.ts"],"sourcesContent":["import crypto from 'node:crypto';\r\nimport { BiWriter } from 'bireader';\r\n\r\n/**\r\n * Random Xor Shift RNG. Can seed with number, a Uint8Array or Buffer of 4 bytes\r\n * ```javascript \r\n * const seed; //number, Uint8Array or Buffer of 4 bytes\r\n * const rng = new RandomXorShift(seed);\r\n * const random_int = rng.random_int();\r\n * ```\r\n * @param {number|Uint8Array|Buffer} seed - Can seeded with a number or a Uint8Array or Buffer of 4 bytes\r\n */\r\nclass RandomXorShift {\r\n    private mt: Uint8Array;\r\n    constructor(seed?: number | Uint8Array | Buffer) {\r\n        var s: number;\r\n        const mt = [0, 0, 0, 0];\r\n        if (seed == undefined) {\r\n            seed = new Date().getTime();\r\n        }\r\n        if (typeof Buffer !== 'undefined' && seed instanceof Buffer) {\r\n            if (seed.length < 4) {\r\n                throw new Error(\"Must be a seed Buffer of 4 bytes\")\r\n            }\r\n            mt[0] = seed.readUInt32LE() >>> 0;\r\n        } else {\r\n            if (seed instanceof Uint8Array) {\r\n                if (seed.length < 4) {\r\n                    throw new Error(\"Must be a seed Uint8Array of 4 bytes\")\r\n                }\r\n                mt[0] = ((seed[3] << 24) | (seed[2] << 16) | (seed[1] << 8) | seed[0])\r\n            } else {\r\n                if (typeof seed == \"number\") {\r\n                    mt[0] = seed >>> 0;\r\n                }\r\n            }\r\n        }\r\n        for (var i = 1; i < 5; i++) {\r\n            s = mt[i - 1] ^ (mt[i - 1] >>> 30);\r\n            mt[i] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + (i - 1);\r\n            mt[i] >>>= 0;\r\n        }\r\n        mt.shift();\r\n        var result = new Uint8Array(16);\r\n        mt.forEach((e, i) => {\r\n            result[(i * 4)] = e & 0xFF;\r\n            result[(i * 4) + 1] = (e >> 8) & 0xFF;\r\n            result[(i * 4) + 2] = (e >> 16) & 0xFF;\r\n            result[(i * 4) + 3] = (e >> 24) & 0xFF;\r\n        });\r\n        this.mt = result;\r\n    }\r\n\r\n    /**\r\n     * Generate a random unsigned 32 bit integer\r\n     * @returns number\r\n     */\r\n    random_int(): number {\r\n        let v1 = ((this.mt[3] << 24) | (this.mt[2] << 16) | (this.mt[1] << 8) | this.mt[0])\r\n        let v4 = ((this.mt[15] << 24) | (this.mt[14] << 16) | (this.mt[13] << 8) | this.mt[12])\r\n        let comp_1 = (v4 ^ (v4 >>> 19) ^ v1 ^ (v1 << 11) ^ ((v1 ^ (v1 << 11)) >>> 8)) >>> 0;\r\n        let new_value = new Uint8Array(4);\r\n        new_value[0] = comp_1 & 0xFF;\r\n        new_value[1] = (comp_1 >> 8) & 0xFF;\r\n        new_value[2] = (comp_1 >> 16) & 0xFF;\r\n        new_value[3] = (comp_1 >> 24) & 0xFF;\r\n        const shift = this.mt.subarray(4, 16);\r\n        var newBuffer = new Uint8Array([...shift, ...new_value]);\r\n        this.mt = newBuffer;\r\n        return comp_1;\r\n    }\r\n};\r\n\r\nexport class Crypt {\r\n    keyBuff: Buffer;\r\n\r\n    ivBuffer: Buffer;\r\n\r\n    key: number;\r\n\r\n    cipher: crypto.Cipher | null = null;\r\n\r\n    decipher: crypto.Decipher | null = null;\r\n\r\n    hashArray = ['aria-256-cbc', 'aes-256-cbc', 'camellia-256-cbc'];\r\n\r\n    hash = \"\";\r\n\r\n    finished = false;\r\n\r\n    constructor(key?: number) {\r\n        if (key == 0 || key == undefined) {\r\n            const rng = new RandomXorShift();\r\n\r\n            this.key = rng.random_int();\r\n        } else {\r\n            this.key = key >>> 0;\r\n        }\r\n\r\n        const hash = this.key & 0x3;  \r\n\r\n        const spin = ((this.key >>> 2) & 0x3F) >>> 0;\r\n\r\n        const value = ((this.key >>> 8) & 0xFFFFFF) >>> 0;\r\n\r\n        const rng = new RandomXorShift(value);\r\n\r\n        for (let i = 0; i < spin; i++) rng.random_int();\r\n\r\n        const keyBuff = new BiWriter(Buffer.alloc(32));\r\n\r\n        const iv = new BiWriter(Buffer.alloc(16));\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            keyBuff.uint32 = rng.random_int();\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            iv.uint32 = rng.random_int();\r\n        }\r\n\r\n        this.hash = this.hashArray[hash % this.hashArray.length];\r\n\r\n        this.keyBuff = keyBuff.data as Buffer;\r\n\r\n        this.ivBuffer = iv.data as Buffer;\r\n    };\r\n\r\n    encrypt(data: Buffer) {\r\n        if (this.cipher == undefined) {\r\n            this.cipher = crypto.createCipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        return Buffer.concat([this.cipher.update(data), this.cipher.final()]);\r\n    };\r\n\r\n    decrypt(data: Buffer) {\r\n        if (this.decipher == undefined) {\r\n            this.decipher = crypto.createDecipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        return Buffer.concat([this.decipher.update(data), this.decipher.final()]);\r\n    };\r\n\r\n    encrypt_block(data: Buffer) {\r\n        if (this.cipher == undefined) {\r\n            this.cipher = crypto.createCipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        if (data.length < 16) {\r\n            this.finished = true;\r\n\r\n            return Buffer.concat([this.cipher.update(data), this.cipher.final()]);\r\n        }\r\n\r\n        return this.cipher.update(data);\r\n    };    \r\n\r\n    decrypt_block(data: Buffer) {\r\n        if (this.decipher == undefined) {\r\n            this.decipher = crypto.createDecipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        if (data.length < 16) {\r\n            this.finished = true;\r\n\r\n            return Buffer.concat([this.decipher.update(data), this.decipher.final()]);\r\n        }\r\n\r\n        return this.decipher.update(data);\r\n    };\r\n\r\n    encrypt_final() {\r\n        if (this.cipher == undefined) {\r\n            this.cipher = crypto.createCipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        if (this.finished == true) {\r\n            return Buffer.alloc(0);\r\n        }\r\n\r\n        return this.cipher.final();\r\n    };\r\n\r\n    decrypt_final() {\r\n        if (this.decipher == undefined) {\r\n            this.decipher = crypto.createDecipheriv(this.hash, this.keyBuff, this.ivBuffer);\r\n        }\r\n\r\n        if (this.finished == true) {\r\n            return Buffer.alloc(0);\r\n        }\r\n\r\n        this.finished = true;\r\n\r\n        return this.decipher.final();\r\n    };\r\n};\r\n\r\nconst CRC_TABLE = new Int32Array([\r\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\r\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\r\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\r\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\r\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\r\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\r\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\r\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\r\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\r\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\r\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\r\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\r\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\r\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\r\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\r\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\r\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\r\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\r\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\r\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\r\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\r\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\r\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\r\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\r\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\r\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\r\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\r\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\r\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\r\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\r\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\r\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\r\n]);\r\n\r\n/**\r\n * Cyclic Redundancy Check 32.\r\n * \r\n * @param {Buffer} current - Message Buffer\r\n * @param {number?} previous - previous hash\r\n * @returns {number}\r\n */\r\nexport function CRC32(current: Buffer, previous: number): number {\r\n    if (!(current instanceof Buffer)) {\r\n        throw new Error(\"Message must be a Buffer.\");\r\n    }\r\n\r\n    let crc = previous === 0 ? 0 : ~~previous! ^ -1;\r\n\r\n    for (let index = 0; index < current.length; index++) {\r\n        crc = CRC_TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\r\n    }\r\n\r\n    return crc ^ -1;\r\n};","import { BiReader, BiReaderStream, BiWriter, BiWriterStream } from \"bireader\";\r\nimport { JPEncode } from './encode.js';\r\nimport { JPDecode } from './decode.js';\r\n\r\n/**\r\n * Example number type to register the extension between 0x00 - 0xCF.\r\n * \r\n * 0xDO - 0xFF are reserved for internal use.\r\n */\r\nconst DATE_EXT_TYPE = 0xFF;\r\n\r\n/**\r\n * Example encoding function\r\n * \r\n * @param {unknown} input - Your object to type check and encode\r\n * @param {JPEncode<ContextType>} encoder - class encoder\r\n * @param {ContextType} context - Context of the class (shouldn't be needed)\r\n * @returns {Buffer|null}\r\n */\r\nfunction encodeTimestampExtension<ContextType = undefined>(\r\n  input: unknown,\r\n  encoder: JPEncode<ContextType>,\r\n  context: ContextType): Buffer | null {\r\n  // check if the input is the same type, else return null\r\n  // here we are converting a Date object into a Buffer\r\n  if (!(input instanceof Date)) {\r\n    return null;\r\n  } else {\r\n    // now convert the data into a Buffer\r\n    const TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\r\n\r\n    const TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\r\n\r\n    const msec = input.getTime();\r\n\r\n    const _sec = Math.floor(msec / 1e3);\r\n\r\n    const _nsec = (msec - _sec * 1e3) * 1e6;\r\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\r\n    const nsecInSec = Math.floor(_nsec / 1e9);\r\n\r\n    const sec = _sec + nsecInSec;\r\n\r\n    const nsec = _nsec - nsecInSec * 1e9;\r\n    // Recommend use is a BiWriter for creating Buffer data\r\n    const bw = new BiWriter(Buffer.alloc(12));\r\n\r\n    bw.endian = encoder.endian;\r\n\r\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\r\n      // Here sec >= 0 && nsec >= 0\r\n      if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\r\n        // timestamp 32 = { sec32 (unsigned) }\r\n        bw.uint32 = sec;\r\n\r\n        bw.trim();\r\n\r\n        return bw.return as Buffer;\r\n      } else {\r\n        // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\r\n        const secHigh = sec / 0x100000000;\r\n\r\n        const secLow = sec & 0xffffffff;\r\n        // nsec30 | secHigh2\r\n        bw.uint32 = (nsec << 2) | (secHigh & 0x3);\r\n        // secLow32\r\n        bw.uint32 = secLow;\r\n\r\n        bw.trim();\r\n\r\n        return bw.return as Buffer;\r\n      }\r\n    } else {\r\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n      bw.uint32 = nsec;\r\n\r\n      bw.int64 = BigInt(sec);\r\n\r\n      bw.trim();\r\n\r\n      return bw.return as Buffer;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Example decoding function\r\n * \r\n * @param {BiReader | BiReaderStream} data - BiReader of buffer data.\r\n * @param {JPDecode<ContextType>} decoder - class decoder\r\n * @param {number} extensionType - Registered extension number between 0x00 - 0xCF (for dummy checks)\r\n * @param {ContextType} context - Context of the class (shouldn't be needed)\r\n * @returns {Date}\r\n */\r\nfunction decodeTimestampExtension<ContextType = undefined>(\r\n  data: BiReader | BiReaderStream,\r\n  decoder: JPDecode<ContextType>,\r\n  extensionType: number,\r\n  context: ContextType): Date {\r\n    // check if the type matches\r\n    if (extensionType != DATE_EXT_TYPE) {\r\n      throw new Error(`Extension for Date encoding 0x${extensionType.toString(16).padStart(2, \"0\")} does not match register type 0x${DATE_EXT_TYPE.toString(16).padStart(2, \"0\")}`);\r\n    }\r\n    // data may be 32, 64, or 96 bits\r\n    switch (data.size) {\r\n      case 4: {\r\n        // timestamp 32 = { sec32 }\r\n        const sec = data.uint32le;\r\n\r\n        const nsec = 0;\r\n\r\n        return new Date(sec * 1e3 + nsec / 1e6);\r\n      }\r\n      case 8: {\r\n        // timestamp 64 = { nsec30, sec34 }\r\n        const nsec30AndSecHigh2 = data.uint32le;\r\n\r\n        const secLow32 = data.uint32le;\r\n\r\n        const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\r\n\r\n        const nsec = nsec30AndSecHigh2 >>> 2;\r\n\r\n        return new Date(sec * 1e3 + nsec / 1e6);\r\n      }\r\n      case 12: {\r\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n        const nsec = data.uint32le;\r\n\r\n        const sec = Number(data.int64le);\r\n\r\n        return new Date(sec * 1e3 + nsec / 1e6);\r\n      }\r\n      default:\r\n        throw new Error(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.size}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Example object passed to `JPExtensionCodec.register`\r\n */\r\nexport const timestampExtension: JPExtensionType = {\r\n  type: DATE_EXT_TYPE,\r\n  encode: encodeTimestampExtension,\r\n  decode: decodeTimestampExtension,\r\n};\r\n\r\nexport class JPExtData {\r\n  readonly type: number;\r\n\r\n  readonly data: Buffer;\r\n\r\n  constructor(type: number, data: Buffer) {\r\n    this.type = type;\r\n    this.data = data;\r\n  }\r\n};\r\n\r\nexport type JPExtensionDecoderType<ContextType> = (\r\n  data: BiReader | BiReaderStream,\r\n  decoder: JPDecode<ContextType>,\r\n  type: number,\r\n  context: ContextType,\r\n) => unknown;\r\n\r\nexport type JPExtensionEncoderType<ContextType> = (\r\n  input: unknown,\r\n  encoder: JPEncode<ContextType>,\r\n  context: ContextType,\r\n) => Buffer | null;\r\n\r\nexport type JPExtensionCodecType<ContextType> = {\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  __brand?: ContextType;\r\n  tryToEncode(object: unknown, encoder: JPEncode<ContextType>, context: ContextType,): JPExtData | null;\r\n  decode(data: BiReader | BiReaderStream, decoder: JPDecode<ContextType>, type:number, context: ContextType): unknown;\r\n};\r\n\r\nexport type JPExtensionType<ContextType = undefined> = {\r\n  /**\r\n   * Number type to register the extension between 0x00 - 0xCF.\r\n   * \r\n   * 0xDO - 0xFF are reserved for internal use.\r\n   */\r\n  type: number;\r\n  /**\r\n   * Encoding function\r\n   * \r\n   * @param {unknown} input - Your object to type check and encode\r\n   * @param {JPEncode<ContextType>} encoder - class encoder\r\n   * @param {ContextType} context - Context of the class (shouldn't be needed)\r\n   * @returns `Buffer|null`\r\n   */\r\n  encode: JPExtensionEncoderType<ContextType>;\r\n  /**\r\n   * Decoding function\r\n   * \r\n   * @param {BiReader | BiReaderStream} data - BiReader of buffer data.\r\n   * @param {JPDecode<ContextType>} decoder - class decoder\r\n   * @param {number} extensionType - Registered extension number between 0x00 - 0xCF (for dummy checks)\r\n   * @param {ContextType} context - Context of the class (shouldn't be needed)\r\n   * @returns `YourType`\r\n   */\r\n  decode: JPExtensionDecoderType<ContextType>;\r\n};\r\n\r\nexport class JPExtensionCodec<ContextType = undefined> implements JPExtensionCodecType<ContextType> {\r\n  public static readonly defaultCodec: JPExtensionCodecType<undefined> = new JPExtensionCodec();\r\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\r\n  // this will make type errors a lot more clear\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  __brand?: ContextType;\r\n\r\n  // custom extensions\r\n  private readonly encoders: Array<JPExtensionEncoderType<ContextType> | undefined | null> = [];\r\n\r\n  private readonly decoders: Array<JPExtensionDecoderType<ContextType> | undefined | null> = [];\r\n\r\n  public constructor(extension?: JPExtensionType) {\r\n    if(extension){\r\n      this.register(extension);\r\n    }\r\n  };\r\n\r\n  public register(extension: JPExtensionType): void {\r\n    // custom extensions\r\n    if ((extension.type < 0 || extension.type > 0xCF)) {\r\n      throw new Error(`Type EXT number is outside of allowed range (0x0 - 0xCF but got 0x${extension.type.toString(16).padStart(2, \"0\")})`);\r\n    }\r\n    this.encoders[extension.type] = extension.encode;\r\n\r\n    this.decoders[extension.type] = extension.decode;\r\n  };\r\n\r\n  public tryToEncode(object: unknown, encoder: JPEncode<ContextType>, context: ContextType): JPExtData | null {\r\n    // custom extensions\r\n    for (let i = 0; i < this.encoders.length; i++) {\r\n      const encodeExt = this.encoders[i];\r\n\r\n      if (encodeExt != null) {\r\n        const data = encodeExt(object, encoder, context);\r\n        if (data != null) {\r\n          const type = i;\r\n\r\n          return new JPExtData(type, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (object instanceof JPExtData) {\r\n      // to keep ExtData as is\r\n      return object;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  public decode(data: BiReader | BiReaderStream, decoder: JPDecode<ContextType>, type:number, context: ContextType): unknown {\r\n    const decodeExt = this.decoders[type];\r\n\r\n    if (decodeExt) {\r\n      return decodeExt(data, decoder, type, context);\r\n    } else {\r\n      // decode() does not fail, returns ExtData instead.\r\n      return new JPExtData(type, data.data as Buffer);\r\n    }\r\n  }\r\n};","import fs from \"fs\";\r\nimport zlib from 'zlib';\r\nimport { constants as bufferConstants } from \"node:buffer\";\r\nimport {\r\n    BiReader,\r\n    BiWriter,\r\n    BiReaderStream,\r\n    BiWriterStream,\r\n} from 'bireader';\r\nimport pack from '../package.json';\r\n\r\ntype reader = BiReader | BiReaderStream | BiWriter | BiWriterStream;\r\n\r\n/**\r\n * Get build version string.\r\n * \r\n * @returns {{VERSION_MAJOR: ubyte, VERSION_MINOR: ubyte}}\r\n */\r\nfunction GetVer(): { VERSION_MAJOR: ubyte, VERSION_MINOR: ubyte } {\r\n    const ver = /(\\d+)(\\.)(\\d+)(\\.)(\\d+)/g.exec(pack.version);\r\n\r\n    return {\r\n        VERSION_MAJOR: parseInt(ver ? ver[1] : \"0\"),\r\n\r\n        VERSION_MINOR: parseInt(ver ? ver[3] : \"0\"),\r\n    };\r\n};\r\n\r\nexport const {\r\n    /**\r\n     * Build verion number to check the file creation params\r\n     */\r\n    VERSION_MAJOR,\r\n    /**\r\n     * Build verion number to check the file creation params\r\n     */\r\n    VERSION_MINOR\r\n} = GetVer();\r\n\r\n/**\r\n * Build verion number to check the file creation params\r\n */\r\nexport const VERSION_NUMBER: float32 = parseFloat(`${VERSION_MAJOR}.${VERSION_MINOR}`);\r\n\r\n/**\r\n * Max Buffer size.\r\n * \r\n * @returns {number}\r\n */\r\nfunction MAX_LENGTH(): number {\r\n    return bufferConstants.MAX_LENGTH;\r\n};\r\n\r\n/**\r\n * Max Buffer size for this system.\r\n */\r\nexport const MAX_BUFFER = MAX_LENGTH() || 0x100000000;\r\n\r\nexport function isFloat32Safe(value: number): boolean {\r\n  if (!Number.isFinite(value)) return true; // Infinity, -Infinity, NaN all store fine\r\n\r\n  const f32 = new Float32Array(1);\r\n\r\n  f32[0] = value;\r\n\r\n  return f32[0] === value;\r\n}\r\n\r\n/**\r\n * 512kb zip chunks\r\n */\r\nconst CHUNK_SIZE = 512 * 1024;\r\n\r\n/**\r\n * Compress a file using Deflate, framed with [length][chunk] blocks.\r\n */\r\nexport function deflateFileSync(inWriter: BiWriterStream, outWriter: BiWriterStream): void {\r\n    inWriter.open();\r\n\r\n    outWriter.open();\r\n\r\n    let bytesToProcess = inWriter.size;\r\n\r\n    let bytesStart = 0;\r\n\r\n    let bytesRead = 0;\r\n\r\n    do {\r\n        bytesRead = Math.min(CHUNK_SIZE, bytesToProcess);        \r\n\r\n        if (bytesRead > 0) {\r\n            const chunk = inWriter.read(bytesStart, bytesRead, true);\r\n\r\n            const compressed = zlib.deflateSync(chunk);\r\n\r\n            outWriter.uint32le = compressed.length;\r\n\r\n            outWriter.overwrite(compressed, true);\r\n\r\n            bytesToProcess -= bytesRead;\r\n\r\n            bytesStart += bytesRead;\r\n        }\r\n    } while (bytesRead === CHUNK_SIZE);\r\n};\r\n\r\n/**\r\n * Decompress a framed deflate-compressed file.\r\n */\r\nexport function inflateFileSync(inReader: BiReaderStream, outWriter: BiWriterStream): void {\r\n    inReader.open();\r\n\r\n    outWriter.open();\r\n\r\n    let bytesToProcess = inReader.size;\r\n\r\n    let bytesStart = 0;\r\n\r\n    let bytesRead = 0;\r\n\r\n    do {\r\n        bytesRead = inReader.uint32;\r\n\r\n        bytesStart += 4;\r\n\r\n        if (bytesRead > 0) {\r\n            const chunk = inReader.read(bytesStart, bytesRead, true);\r\n\r\n            bytesToProcess -= chunk.length;\r\n\r\n            const uncompressed = zlib.inflateSync(chunk);\r\n\r\n            outWriter.overwrite(uncompressed, true);\r\n\r\n            bytesStart += bytesRead;\r\n        }\r\n    } while (bytesStart < bytesToProcess);\r\n};\r\n\r\n/**\r\n * Compress a Buffer using Deflate, framed with [length][chunk] blocks.\r\n */\r\nexport function deflateBuffer(inWriter: reader): Buffer {\r\n    let bytesToProcess = inWriter.size;\r\n\r\n    let bytesStart = 0;\r\n\r\n    let bytesRead = 0;\r\n\r\n    const buffers:Buffer[] = [];\r\n\r\n    do {\r\n        bytesRead = Math.min(CHUNK_SIZE, bytesToProcess);      \r\n\r\n        if (bytesRead > 0) {\r\n            const chunk = inWriter.read(bytesStart, bytesRead, true);\r\n\r\n            const compressed = zlib.deflateSync(chunk);\r\n\r\n            const lenBuf = Buffer.alloc(4);\r\n\r\n            lenBuf.writeUInt32LE(compressed.length, 0);\r\n\r\n            buffers.push(lenBuf);\r\n\r\n            buffers.push(compressed);\r\n\r\n            bytesToProcess -= bytesRead;\r\n\r\n            bytesStart += bytesRead;\r\n        }\r\n    } while (bytesRead === CHUNK_SIZE);\r\n\r\n    return Buffer.concat(buffers);\r\n};\r\n\r\n/**\r\n * Decompress a framed deflate-compressed buffer.\r\n */\r\nexport function inflateBuffer(bw: reader): Buffer {\r\n    const startingOff = bw.offset;\r\n\r\n    const size = bw.size;\r\n    \r\n    const totalBuffer = size - startingOff;\r\n    \r\n    let bytesRead = 0;\r\n\r\n    const buffers:Buffer[] = [];\r\n\r\n    while (bytesRead < totalBuffer) {\r\n        const chunkLen = bw.readUInt32LE(); bytesRead += 4;\r\n    \r\n        const compressed = bw.extract(chunkLen); bytesRead += chunkLen;\r\n        \r\n        const decompressed = zlib.inflateSync(compressed);\r\n\r\n        buffers.push(decompressed);\r\n    }\r\n\r\n    return Buffer.concat(buffers);\r\n};\r\n\r\nexport function copyfile(inputPath: string, start: number, outputPath: string) {\r\n    const chunkSize = 64 * 1024;\r\n\r\n    const buffer = Buffer.alloc(chunkSize);\r\n    \r\n    const fd1 = fs.openSync(inputPath, \"r\");\r\n\r\n    const fd2 = fs.openSync(outputPath, \"w+\");\r\n\r\n    const stat = fs.fstatSync(fd1);\r\n\r\n    var size = stat.size;\r\n\r\n    let remaining = size - start;\r\n    \r\n    let readPos = start;\r\n\r\n    let writePos = 0;\r\n\r\n    while (remaining > 0) {\r\n        const actualRead = Math.min(chunkSize, remaining);\r\n\r\n        if (actualRead == 0) break;\r\n\r\n        fs.readSync(fd1, buffer, 0, actualRead, readPos);\r\n\r\n        fs.writeSync(fd2, buffer, 0, actualRead, writePos);\r\n\r\n        writePos += actualRead;\r\n\r\n        readPos += actualRead;\r\n\r\n        remaining -= actualRead;\r\n    }\r\n\r\n    fs.closeSync(fd1);\r\n    \r\n    fs.closeSync(fd2);\r\n};\r\n\r\nexport function isArrayBufferLike(buffer: unknown): buffer is ArrayBufferLike {\r\n    return (\r\n        buffer instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \"undefined\" && buffer instanceof SharedArrayBuffer)\r\n    );\r\n};\r\n\r\nexport function ensureBuffer(\r\n    buffer: Buffer | ArrayLike<number> | Uint8Array<ArrayBufferLike> | ArrayBufferView | ArrayBufferLike,\r\n): Buffer {\r\n    if (buffer instanceof Buffer) {\r\n        return buffer;\r\n    } else if (buffer instanceof Uint8Array) {\r\n        return Buffer.from(buffer);\r\n    } else if (ArrayBuffer.isView(buffer)) {\r\n        return Buffer.from(buffer.buffer);\r\n    } else if (isArrayBufferLike(buffer)) {\r\n        return Buffer.from(buffer);\r\n    } else {\r\n        // ArrayLike<number>\r\n        return Buffer.from(buffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Merges 2 or 3 files into 1.\r\n * \r\n * @param {string} inputFile1 - file path\r\n * @param {string} inputFile2 - file path\r\n * @param {string} outputFile - file path\r\n * @param {string?} inputFile3 - file path\r\n */\r\nexport function concatenateFilesSync(inputFile1:string, inputFile2:string, outputFile:string, inputFile3?:string,) {\r\n    const bufferSize = 0x4000; // 16384 bytes\r\n\r\n    const fdIn1 = fs.openSync(inputFile1, 'r');\r\n    const fdIn2 = fs.openSync(inputFile2, 'r');\r\n    var fdIn3:number|undefined;\r\n    if(inputFile3 != undefined){\r\n        fdIn3 = fs.openSync(inputFile3, 'r');\r\n    }\r\n    const fdOut = fs.openSync(outputFile, 'w');\r\n\r\n    try {\r\n        const buffer = Buffer.alloc(bufferSize);\r\n        let bytesRead:number;\r\n\r\n        while ((bytesRead = fs.readSync(fdIn1, buffer, 0, bufferSize, null)) > 0) {\r\n            fs.writeSync(fdOut, buffer, 0, bytesRead);\r\n        }\r\n\r\n        while ((bytesRead = fs.readSync(fdIn2, buffer, 0, bufferSize, null)) > 0) {\r\n            fs.writeSync(fdOut, buffer, 0, bytesRead);\r\n        }\r\n\r\n        if(fdIn3 != undefined){\r\n            while ((bytesRead = fs.readSync(fdIn3, buffer, 0, bufferSize, null)) > 0) {\r\n                fs.writeSync(fdOut, buffer, 0, bytesRead);\r\n            }\r\n        }\r\n    } finally {\r\n        // Close all file descriptors\r\n        fs.closeSync(fdIn1);\r\n        fs.closeSync(fdIn2);\r\n        if(fdIn3 != undefined){\r\n            fs.closeSync(fdIn3);\r\n        }\r\n        fs.closeSync(fdOut);\r\n\r\n        // then delete the others\r\n        fs.unlinkSync(inputFile1);\r\n        fs.unlinkSync(inputFile2);\r\n        if(inputFile3 != undefined){\r\n            fs.unlinkSync(inputFile3);\r\n        }\r\n    }\r\n};\r\n\r\nexport type endian = \"little\" | \"big\";\r\n\r\nexport type BigValue = bigint | number;\r\n\r\n/**\r\n * Between 0 and 1.\r\n */\r\nexport type bit = 1 | 0;\r\n/**\r\n * Between 0 and 255.\r\n */\r\nexport type ubyte = number;\r\n/**\r\n * Between -128 to 127.\r\n */\r\nexport type byte = number;\r\n/**\r\n * Between 0 and 255.\r\n */\r\nexport type uint8 = number;\r\n/**\r\n * Between -128 to 127.\r\n */\r\nexport type int8 = number;\r\n/**\r\n * Between 0 to 65535.\r\n */\r\nexport type uint16 = number;\r\n/**\r\n * Between -32768 to 32767.\r\n */\r\nexport type int16 = number;\r\n/**\r\n * Between 0 to 4294967295.\r\n */\r\nexport type uint32 = number;\r\n/**\r\n * Between -2147483648 to 2147483647\r\n */\r\nexport type int32 = number;\r\n/**\r\n * Between 0  to 18446744073709551615\r\n */\r\nexport type uint64 = bigint;\r\n/**\r\n * Between -9223372036854775808 to 9223372036854775807\r\n */\r\nexport type int64 = bigint;\r\n/**\r\n * Between -3.40282347E+38 to -1.17549435E-38\r\n */\r\nexport type float32 = number;\r\n/**\r\n * Between -1.7977 x 10^308 to -2.2251 x 10^-308\r\n * \r\n * And between 2.2251 x 10^-308 to 1.7977 x 10^308\r\n */\r\nexport type float64 = number;\r\n\r\n/**\r\n * Internal index for values.\r\n */\r\nexport enum JPType {\r\n              // 0x00 - 0x7F positive fixint \r\n    OBJECT_0   = 0x80, // = {} length\r\n    OBJECT_1   = 0x81,\r\n    OBJECT_2   = 0x82,\r\n    OBJECT_3   = 0x83,\r\n    OBJECT_4   = 0x84,\r\n    OBJECT_5   = 0x85,\r\n    OBJECT_6   = 0x86,\r\n    OBJECT_7   = 0x87,\r\n    OBJECT_8   = 0x88,\r\n    OBJECT_9   = 0x89,\r\n    OBJECT_10  = 0x8A,\r\n    OBJECT_11  = 0x8B,\r\n    OBJECT_12  = 0x8C,\r\n    OBJECT_13  = 0x8D,\r\n    OBJECT_14  = 0x8E,\r\n    OBJECT_15  = 0x8F,\r\n    ARRAY_0    = 0x90, // = [] length\r\n    ARRAY_1    = 0x91,\r\n    ARRAY_2    = 0x92,\r\n    ARRAY_3    = 0x93,\r\n    ARRAY_4    = 0x94,\r\n    ARRAY_5    = 0x95,\r\n    ARRAY_6    = 0x96,\r\n    ARRAY_7    = 0x97,\r\n    ARRAY_8    = 0x98,\r\n    ARRAY_9    = 0x99,\r\n    ARRAY_10   = 0x9A,\r\n    ARRAY_11   = 0x9B,\r\n    ARRAY_12   = 0x9C,\r\n    ARRAY_13   = 0x9D,\r\n    ARRAY_14   = 0x9E,\r\n    ARRAY_15   = 0x9F,\r\n    KEY_0      = 0xA0, // Index. Only used when stripping keys, uses string otherwise\r\n    KEY_1      = 0xA1,\r\n    KEY_2      = 0xA2,\r\n    KEY_3      = 0xA3,\r\n    KEY_4      = 0xA4,\r\n    KEY_5      = 0xA5,\r\n    KEY_6      = 0xA6,\r\n    KEY_7      = 0xA7,\r\n    KEY_8      = 0xA8,\r\n    KEY_9      = 0xA9,\r\n    KEY_10     = 0xAA,\r\n    KEY_11     = 0xAB,\r\n    KEY_12     = 0xAC,\r\n    KEY_13     = 0xAD,\r\n    KEY_14     = 0xAE,\r\n    KEY_15     = 0xAF,\r\n    STR_0      = 0xB0, // = Index of the string in the string section, unless in the string section.\r\n    STR_1      = 0xB1,\r\n    STR_2      = 0xB2,\r\n    STR_3      = 0xB3,\r\n    STR_4      = 0xB4,\r\n    STR_5      = 0xB5,\r\n    STR_6      = 0xB6,\r\n    STR_7      = 0xB7,\r\n    STR_8      = 0xB8,\r\n    STR_9      = 0xB9,\r\n    STR_10     = 0xBA,\r\n    STR_11     = 0xBB,\r\n    STR_12     = 0xBC,\r\n    STR_13     = 0xBD,\r\n    STR_14     = 0xBE,\r\n    STR_15     = 0xBF,\r\n    NULL       = 0xC0, \r\n    UNDEFINED  = 0xC1, \r\n    BOOL_FALSE = 0xC2, \r\n    BOOL_TRUE  = 0xC3, \r\n    FINISHED   = 0xC4, // Kill byte\r\n    LIST_END   = 0xC5, // special ext type\r\n    UNUSED_C6  = 0xC6,\r\n    OBJECT8    = 0xC7,\r\n    OBJECT16   = 0xC8,\r\n    OBJECT32   = 0xC9,\r\n    FLOAT32    = 0xCA,\r\n    FLOAT64    = 0xCB,\r\n    UINT_8     = 0xCC,\r\n    UINT_16    = 0xCD,\r\n    UINT_32    = 0xCE,\r\n    UINT_64    = 0xCF,\r\n    INT_8      = 0xD0,\r\n    INT_16     = 0xD1,\r\n    INT_32     = 0xD2,\r\n    INT_64     = 0xD3,\r\n    KEY8       = 0xD4,\r\n    KEY16      = 0xD5,\r\n    KEY32      = 0xD6,\r\n    STR8       = 0xD7,\r\n    STR16      = 0xD8,\r\n    STR32      = 0xD9,\r\n    ARRAY8     = 0xDA,\r\n    ARRAY16    = 0xDB,\r\n    ARRAY32    = 0xDC,\r\n    EXT8       = 0xDD,\r\n    EXT16      = 0xDE,\r\n    EXT32      = 0xDF,\r\n              // 0xE0 - 0xFF negative fixint \r\n};\r\n\r\n/**\r\n * Internal index for ext values.\r\n */\r\nexport enum JPExtType {\r\n                     // 0xD0 - 0xFF are reserve extend numbers\r\n    Maps              = 0xEE, // Size here is the array size of Map, not the buffer size\r\n    Sets              = 0xEF, // Size here is the array size of Set, not the buffer size\r\n    Symbol            = 0xF0, // Has fixed bool and string read after.\r\n    RegEx             = 0xF1, // Two strings\r\n    BigUint64Array    = 0xF2, \r\n    BigInt64Array     = 0xF3,\r\n    Float64Array      = 0xF4,\r\n    Float32Array      = 0xF5,\r\n    Float16Array      = 0xF6, // not in use yet\r\n    Int32Array        = 0xF7,\r\n    Uint32Array       = 0xF8,\r\n    Uint16Array       = 0xF9,\r\n    Int16Array        = 0xFA,\r\n    Int8Array         = 0xFB,\r\n    Uint8Array        = 0xFC,\r\n    Uint8ClampedArray = 0xFD,\r\n    Buffer            = 0xFE,\r\n    Date              = 0xFF // MSGPACK Standard\r\n};\r\n\r\n/**\r\n * For creating a unique string list\r\n */\r\nexport class stringList {\r\n    array: string[] = [];\r\n\r\n    set = new Set();\r\n\r\n    /**\r\n     * For creating a unique string list\r\n     * \r\n     * @param {string[]?} stringArray \r\n     */\r\n    constructor(stringArray?: string[]) {\r\n        if (stringArray) {\r\n            this.array = stringArray;\r\n            this.set = new Set(stringArray);\r\n        }\r\n        else {\r\n            this.array = [];\r\n            this.set = new Set();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add string\r\n     * \r\n     * @param {string} value \r\n     * @returns {number} index\r\n     */\r\n    add(value: string): number {\r\n        if (!this.set.has(value)) {\r\n            this.set.add(value);\r\n            this.array.push(value);\r\n        }\r\n        return this.getIndex(value);\r\n    };\r\n\r\n    /**\r\n     * Gets the string from the index\r\n     * \r\n     * @param {number} value \r\n     * @returns {string}\r\n     */\r\n    get(value: number): string {\r\n        return this.array[value];\r\n    };\r\n\r\n    /**\r\n     * Shouldn't ever use!\r\n     * \r\n     * @param {string} value \r\n     */\r\n    remove(value: string) {\r\n        if (this.set.has(value)) {\r\n            this.set.delete(value);\r\n            // Find the index of the value in the array and remove it\r\n            const index = this.array.indexOf(value);\r\n            if (index !== -1) {\r\n                this.array.splice(index, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the index for the string\r\n     * \r\n     * @param {string} value \r\n     * @returns {number} index\r\n     */\r\n    getIndex(value: string): number {\r\n        return this.array.indexOf(value);\r\n    };\r\n\r\n    /**\r\n     * returns data as an array\r\n     * \r\n     * @returns {string[]} string array\r\n     */\r\n    getValues(): string[] {\r\n        return this.array;\r\n    };\r\n\r\n    /**\r\n     * Check the set has the value\r\n     * \r\n     * @param {string} value \r\n     * @returns {boolean} if the value is in the dataset\r\n     */\r\n    has(value: string): boolean {\r\n        return this.set.has(value);\r\n    };\r\n};\r\n\r\n/**\r\n * File flags\r\n */\r\nexport type JPFlags = {\r\n    /**\r\n     * For files over 4 gigs.\r\n     * \r\n     * bit 0\r\n     */\r\n    LargeFile: bit,\r\n    /**\r\n     * Compressed file\r\n     * \r\n     * bit 1\r\n     */\r\n    Compressed: bit,\r\n    /**\r\n     * CRC32 check\r\n     * \r\n     * bit 2\r\n     */\r\n    Crc32: bit,\r\n    /**\r\n     * Encrypted\r\n     * \r\n     * bit 3\r\n     */\r\n    Encrypted: bit,\r\n    /**\r\n     * Encryption value removed\r\n     * \r\n     * bit 4\r\n     */\r\n    EncryptionExcluded: bit,\r\n    /**\r\n     * Keys removed (schema mode)\r\n     * \r\n     * bit 5\r\n     */\r\n    KeyStripped: bit,\r\n};\r\n\r\nexport type ContextOf<ContextType> = ContextType extends undefined\r\n    ? object\r\n    : {\r\n        /**\r\n         * Custom user-defined data, read/writable\r\n         */\r\n        context: ContextType;\r\n    };\r\n\r\nexport class JPBase {\r\n\r\n    ////////////////\r\n    //  BUFFERS   //\r\n    ////////////////\r\n\r\n    /**\r\n     * Buffer for header data.\r\n     */\r\n    headerBuffer: Buffer | null = null;\r\n\r\n    ////////////////\r\n    //  WRITERS   //\r\n    ////////////////\r\n\r\n    useStream = false;\r\n\r\n    valueWriter: BiWriter | BiWriterStream | null = null;\r\n\r\n    strWriter:   BiWriter | BiWriterStream | null = null;\r\n\r\n    compWriter:  BiWriter | BiWriterStream | null = null;\r\n\r\n    ////////////////\r\n    //  READERS   //\r\n    ////////////////\r\n\r\n    fileReader:  BiReader | BiReaderStream | null = null;\r\n\r\n    valueReader: BiReader | BiReaderStream | null = null;\r\n\r\n    strReader:   BiReader | BiReaderStream | null = null;    \r\n\r\n    compReader:  BiReader | BiReaderStream | null = null;\r\n\r\n    ////////////////\r\n    //   SIZES    //\r\n    ////////////////\r\n\r\n    /**\r\n     * Internal size.\r\n     */\r\n    private _HEADER_SIZE: ubyte = 0;\r\n\r\n    /**\r\n     * Size of the header buffer.\r\n     */\r\n    set HEADER_SIZE(value: uint8) {\r\n        this._HEADER_SIZE = value;\r\n    };\r\n\r\n    /**\r\n     * Size of the header buffer.\r\n     */\r\n    get HEADER_SIZE(): uint8 {\r\n        if (this._HEADER_SIZE != 0) {\r\n            return this._HEADER_SIZE;\r\n        } else if (this.headerBuffer != null) {\r\n            this._HEADER_SIZE = this.headerBuffer.length;\r\n\r\n            return this.headerBuffer.length;\r\n        } else {\r\n            var HEADER_SIZE = 32;\r\n\r\n            if (this.Crc32) {\r\n                HEADER_SIZE += 4;\r\n            }\r\n\r\n            if (this.Encrypted && !this.EncryptionExcluded) {\r\n                HEADER_SIZE += 4;\r\n            }\r\n\r\n            this._HEADER_SIZE = HEADER_SIZE;\r\n\r\n            return this._HEADER_SIZE;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Internal size.\r\n     */\r\n    private _VALUE_SIZE: uint64 = 0n;\r\n\r\n    /**\r\n     * The size of the section that has values data.\r\n     */\r\n    set VALUE_SIZE(value: BigValue) {\r\n        this._VALUE_SIZE = BigInt(value);\r\n    };\r\n\r\n   /**\r\n     * The size of the section that has every other type of data.\r\n     */\r\n    get VALUE_SIZE(): uint64 {\r\n        if (this._VALUE_SIZE != 0n) {\r\n            return this._VALUE_SIZE;\r\n        } else if (this.valueWriter != null) {\r\n            this.valueWriter.get;\r\n            this._VALUE_SIZE = BigInt(this.valueWriter.offset);\r\n            return this._VALUE_SIZE;\r\n        } else {\r\n            return 0n;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Internal size.\r\n     */\r\n    private _STR_SIZE: uint64 = 0n;\r\n\r\n    /**\r\n     * The size of the section that has string / key data.\r\n     */\r\n    set STR_SIZE(value: BigValue) {\r\n        this._STR_SIZE = BigInt(value);\r\n    };\r\n\r\n    /**\r\n     * The size of the section that has string / key data.\r\n     */\r\n    get STR_SIZE(): uint64 {\r\n        if (this._STR_SIZE != 0n) {\r\n            return this._STR_SIZE;\r\n        } else if (this.strWriter != null) {\r\n            this.strWriter.get;\r\n            this._STR_SIZE = BigInt(this.strWriter.offset);\r\n            return this._STR_SIZE;\r\n        } else {\r\n            return 0n;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Internal size.\r\n     */\r\n    private _DATA_SIZE: uint64 = 0n;\r\n\r\n    /**\r\n     * Total value size for both section, used when compressed or encrypted.\r\n     */\r\n    set DATA_SIZE(value: BigValue) {\r\n        this._DATA_SIZE = BigInt(value);\r\n    };\r\n\r\n    /**\r\n     * Total value size for both section, used when compressed or encrypted.\r\n     */\r\n    get DATA_SIZE(): uint64 {\r\n        if (this._DATA_SIZE != 0n) {\r\n            return this._DATA_SIZE;\r\n        } else if (this._VALUE_SIZE != 0n && this._STR_SIZE != 0n) {\r\n            this._DATA_SIZE = BigInt(this._VALUE_SIZE + this._STR_SIZE);\r\n            return this._DATA_SIZE;\r\n        } else if (this.strWriter != null && this.valueWriter != null) {\r\n            this._DATA_SIZE = BigInt(this.valueWriter.size + this.strWriter.length);\r\n            return this._DATA_SIZE;\r\n        } else {\r\n            return 0n;\r\n        }\r\n    };\r\n\r\n    ////////////////\r\n    //   FLAGS    //\r\n    ////////////////\r\n\r\n    /**\r\n    * Flags for file header.\r\n    */\r\n    flags: JPFlags = {\r\n        LargeFile: 0,\r\n        Compressed: 0,\r\n        Crc32: 0,\r\n        Encrypted: 0,\r\n        EncryptionExcluded: 0,\r\n        KeyStripped: 0\r\n    };\r\n\r\n    /**\r\n     * For files over 4 gigs.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set LargeFile(bit: bit) {\r\n        this.flags.LargeFile = (bit & 1) as bit;\r\n    };\r\n\r\n    /**\r\n     * For files over 4 gigs.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get LargeFile(): bit {\r\n        return this.flags.LargeFile;\r\n    };\r\n\r\n    /**\r\n     * If the data is zlib compressed.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get Compressed():bit {\r\n        return this.flags.Compressed;\r\n    };\r\n\r\n    /**\r\n     * If the data is zlib compressed.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set Compressed(bit: bit) {\r\n        this.flags.Compressed = (bit & 1) as bit;\r\n    };\r\n\r\n    /**\r\n     * If a CRC32 is done on the data.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get Crc32(): bit {\r\n        return this.flags.Crc32;\r\n    };\r\n\r\n    /**\r\n     * If a CRC32 is done on the data.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set Crc32(bit: bit) {\r\n        this.flags.Crc32 = (bit & 1) as bit;\r\n    };\r\n\r\n    /**\r\n     * If the file is encrypted.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get Encrypted(): bit {\r\n        return this.flags.Encrypted;\r\n    };\r\n\r\n    /**\r\n     * If the file is encrypted.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set Encrypted(bit: bit) {\r\n        this.flags.Encrypted = (bit & 1) as bit;\r\n    };\r\n\r\n    /**\r\n     * If the file's encryption key is not kept within the file.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get EncryptionExcluded(): bit {\r\n        return this.flags.EncryptionExcluded;\r\n    };\r\n\r\n    /**\r\n     * If the file's encryption key is not kept within the file.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set EncryptionExcluded(bit: bit) {\r\n        this.flags.EncryptionExcluded = (bit & 1) as bit;\r\n    };\r\n\r\n    /**\r\n     * If the object keys are removed from the file.\r\n     * \r\n     * @returns {bit} flag\r\n     */\r\n    get KeyStripped(): bit {\r\n        return this.flags.KeyStripped;\r\n    };\r\n\r\n    /**\r\n     * If the object keys are removed from the file.\r\n     * \r\n     * @param {bit} bit flag\r\n     */\r\n    set KeyStripped(bit: bit) {\r\n        this.flags.KeyStripped = (bit & 1) as bit;\r\n    };\r\n\r\n    ////////////////////\r\n    // EXTRA HEADERS  //\r\n    ////////////////////\r\n\r\n    /**\r\n     * Encryption key For decryption.\r\n     */\r\n    private _encryptionKey: uint32 = 0;\r\n\r\n    /**\r\n     * Encryption value. For decryption.\r\n     */\r\n    set encryptionKey(value: uint32) {\r\n        this._encryptionKey = value >>> 0;\r\n    }\r\n\r\n    /**\r\n     * Encryption value. For decryption.\r\n     */\r\n    get encryptionKey() {\r\n        return this._encryptionKey;\r\n    }\r\n\r\n    /**\r\n     * Check hash value. From value data on after decomp and decryption.\r\n     */\r\n    private _CRC32: uint32 = 0;\r\n\r\n    /**\r\n     * Check hash value. From value data on after decomp and decryption.\r\n     */\r\n    set CRC32(value:number){\r\n        this._CRC32 = value;\r\n    }\r\n\r\n    /**\r\n     * Check hash value. From value data on after decomp and decryption.\r\n     */\r\n    get CRC32() {\r\n        return this._CRC32;\r\n    }\r\n\r\n    ////////////////////\r\n    // SHARED OBJECTS //\r\n    ////////////////////\r\n\r\n    /**\r\n     * Object keys for when `stripKeys` was enabled in encoding.\r\n     * \r\n     * This array MUST be passed to decoder for the file to be decoded.\r\n     */\r\n    keysArray: string[] = [];\r\n\r\n    entered = false;\r\n\r\n    fileName = \"\";\r\n};","import fs from \"fs\";\r\nimport { Crypt, CRC32 } from './hash.js';\r\nimport { BiReader, BiReaderStream, BiWriterStream } from 'bireader';\r\nimport { JPExtensionCodec, JPExtensionCodecType } from \"./ext.js\";\r\nimport {\r\n    VERSION_NUMBER,\r\n    inflateFileSync,\r\n    inflateBuffer,\r\n    endian,\r\n    bit,\r\n    JPType,\r\n    JPExtType,\r\n    MAX_BUFFER,\r\n    JPBase,\r\n    ensureBuffer,\r\n    ContextOf\r\n} from './common.js';\r\n\r\n/**\r\n * Options for `JPDecode`\r\n */\r\nexport type DecoderOptions<ContextType = undefined> = Readonly<\r\n    Partial<{\r\n        /**\r\n         * Created from `ExtensionCodec` class.\r\n         */\r\n        extensionCodec: JPExtensionCodecType<ContextType>;\r\n        context?: ContextType;\r\n\r\n        /**\r\n         * Object keys for when `stripKeys` was enabled during encoding.\r\n         * \r\n         * This array MUST be passed to decoder for the file to be decoded.\r\n         */\r\n        keysArray?: string[];\r\n\r\n        /**\r\n         * 32 bit encryption key for when `stripEncryptKey` was enabled in encoding.\r\n         * \r\n         * If the key was stripped from the file, this number MUST be passed to decoder for the file to be decoded.\r\n         */\r\n        encryptionKey?: number;\r\n\r\n        /**\r\n         * This ensures all 64 bit values return as `bigint`\r\n         */\r\n        enforceBigInt?: boolean;\r\n\r\n        /**\r\n         * Forces the decoder to only return only a valid JSON object.\r\n         * \r\n         * This will mostly suppress / convert all extention types that aren't valid JSON.\r\n         */\r\n        makeJSON?: boolean;\r\n        \r\n    }>\r\n> &\r\n    ContextOf<ContextType>;\r\n\r\nconst STATE_ARRAY = \"array\";\r\n\r\nconst STATE_SET = \"set\";\r\n\r\nconst STATE_MAP_KEY = \"map_key\";\r\n\r\nconst STATE_MAP_VALUE = \"map_value\";\r\n\r\nconst STATE_OBJECT_KEY = \"object_key\";\r\n\r\nconst STATE_OBJECT_VALUE = \"object_value\";\r\n\r\ntype MapKeyType = string | number | symbol;\r\n\r\nconst mapKeyConverter = (key: unknown): MapKeyType => {\r\n    if (typeof key === \"string\" || typeof key === \"number\" || typeof key == \"symbol\") {\r\n        return key;\r\n    }\r\n\r\n    throw new Error(\"The type of key must be string or number but \" + typeof key);\r\n};\r\n\r\ntype StackMapState = {\r\n    type: typeof STATE_MAP_KEY | typeof STATE_MAP_VALUE;\r\n\r\n    size: number;\r\n\r\n    key: MapKeyType | null;\r\n\r\n    readCount: number;\r\n\r\n    map: Map<MapKeyType, unknown>;\r\n};\r\n\r\ntype StackObjectState = {\r\n    type: typeof STATE_OBJECT_KEY | typeof STATE_OBJECT_VALUE;\r\n\r\n    size: number;\r\n\r\n    key: MapKeyType | null;\r\n\r\n    readCount: number;\r\n\r\n    object: Record<MapKeyType, unknown>;\r\n};\r\n\r\ntype StackArrayState = {\r\n    type: typeof STATE_ARRAY;\r\n\r\n    size: number;\r\n\r\n    array: Array<unknown>;\r\n\r\n    position: number;\r\n};\r\n\r\ntype StackSetState = {\r\n    type: typeof STATE_SET;\r\n\r\n    size: number;\r\n\r\n    set: Set<unknown>;\r\n\r\n    position: number;\r\n};\r\n\r\ntype StackState = StackSetState | StackArrayState | StackMapState | StackObjectState;\r\n\r\nclass StackPool {\r\n    private readonly stack: Array<StackState> = [];\r\n\r\n    private stackHeadPosition = -1;\r\n\r\n    public get length(): number {\r\n        return this.stackHeadPosition + 1;\r\n    };\r\n\r\n    public top(): StackState | undefined {\r\n        return this.stack[this.stackHeadPosition];\r\n    };\r\n\r\n    public pushArrayState(size: number) {\r\n        const state = this.getUninitializedStateFromPool() as StackArrayState;\r\n\r\n        state.type = STATE_ARRAY;\r\n\r\n        state.position = 0;\r\n\r\n        state.size = size;\r\n\r\n        state.array = new Array(size);\r\n    };\r\n\r\n    public pushSetState(size: number) {\r\n        const state = this.getUninitializedStateFromPool() as StackSetState;\r\n\r\n        state.type = STATE_SET;\r\n\r\n        state.position = 0;\r\n\r\n        state.size = size;\r\n\r\n        state.set = new Set();\r\n    };\r\n\r\n    public pushMapState(size: number) {\r\n        const state = this.getUninitializedStateFromPool() as StackMapState;\r\n\r\n        state.type = STATE_MAP_KEY;\r\n\r\n        state.readCount = 0;\r\n\r\n        state.size = size;\r\n\r\n        state.map = new Map();\r\n    };\r\n\r\n    public pushObjectState(size: number) {\r\n        const state = this.getUninitializedStateFromPool() as StackObjectState;\r\n\r\n        state.type = STATE_OBJECT_KEY;\r\n\r\n        state.readCount = 0;\r\n\r\n        state.size = size;\r\n\r\n        state.object = {};\r\n    };\r\n\r\n    private getUninitializedStateFromPool() {\r\n        this.stackHeadPosition++;\r\n\r\n        if (this.stackHeadPosition === this.stack.length) {\r\n            const partialState: Partial<StackState> = {\r\n                type: undefined,\r\n\r\n                size: 0,\r\n\r\n                array: undefined,\r\n\r\n                position: 0,\r\n\r\n                readCount: 0,\r\n\r\n                object: undefined,\r\n\r\n                map: undefined,\r\n\r\n                set: undefined,\r\n\r\n                key: null,\r\n            };\r\n\r\n            this.stack.push(partialState as StackState);\r\n        }\r\n\r\n        return this.stack[this.stackHeadPosition];\r\n    };\r\n\r\n    public release(state: StackState): void {\r\n        const topStackState = this.stack[this.stackHeadPosition];\r\n\r\n        if (topStackState !== state) {\r\n            throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\r\n        }\r\n\r\n        if (state.type === STATE_SET) {\r\n            const partialState = state as Partial<StackSetState>;\r\n\r\n            partialState.size = 0;\r\n\r\n            partialState.set = undefined;\r\n\r\n            partialState.position = 0;\r\n\r\n            partialState.type = undefined;\r\n        }\r\n\r\n        if (state.type === STATE_ARRAY) {\r\n            const partialState = state as Partial<StackArrayState>;\r\n\r\n            partialState.size = 0;\r\n\r\n            partialState.array = undefined;\r\n\r\n            partialState.position = 0;\r\n\r\n            partialState.type = undefined;\r\n        }\r\n\r\n        if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\r\n            const partialState = state as Partial<StackMapState>;\r\n\r\n            partialState.size = 0;\r\n\r\n            partialState.map = undefined;\r\n\r\n            partialState.readCount = 0;\r\n\r\n            partialState.type = undefined;\r\n        }\r\n\r\n        if (state.type === STATE_OBJECT_KEY || state.type === STATE_OBJECT_VALUE) {\r\n            const partialState = state as Partial<StackObjectState>;\r\n\r\n            partialState.size = 0;\r\n\r\n            partialState.object = undefined;\r\n\r\n            partialState.readCount = 0;\r\n\r\n            partialState.type = undefined;\r\n        }\r\n\r\n        this.stackHeadPosition--;\r\n    };\r\n\r\n    public reset(): void {\r\n        this.stack.length = 0;\r\n\r\n        this.stackHeadPosition = -1;\r\n    };\r\n};\r\n\r\n/**\r\n * Create with `DecoderOptions`\r\n */\r\nexport class JPDecode<ContextType = undefined> extends JPBase {\r\n    private readonly extensionCodec: JPExtensionCodecType<ContextType>;\r\n\r\n    private readonly context: ContextType;\r\n\r\n    private readonly mapKeyConverter = mapKeyConverter;\r\n\r\n    private readonly stack = new StackPool();\r\n\r\n    private stringsList: string[] = [];\r\n\r\n    /**\r\n     * Endianness. Defaults to `little`\r\n     */\r\n    endian: endian = \"little\";\r\n\r\n    /**\r\n     * Converts return to valid JSON\r\n     */\r\n    makeJSON = false;\r\n\r\n    /**\r\n     * Ensures all 64 bit values return as `bigint`\r\n     */\r\n    enforceBigInt = false;\r\n\r\n    /**\r\n     * File Buffer\r\n     */\r\n    private buffer: Buffer | null = null;\r\n\r\n    /**\r\n     * Direct objects for any symbols that were encoded.\r\n     */\r\n    symbolList: symbol[] = [];\r\n\r\n    /**\r\n     * If a temp file was needed.\r\n     */\r\n    private tempCreated = false;\r\n\r\n    /**\r\n     * If the file buffer has extensions types in use.\r\n     */\r\n    hasExtensions = false;\r\n\r\n    /**\r\n     * Set up with basic options.\r\n     * \r\n     * @param {DecoderOptions?} options - options for decoding\r\n     */\r\n    constructor(options?: DecoderOptions<ContextType>) {\r\n        super();\r\n\r\n        this.extensionCodec = options?.extensionCodec ?? (JPExtensionCodec.defaultCodec as JPExtensionCodecType<ContextType>);\r\n\r\n        this.context = (options as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\r\n\r\n        this.keysArray = options?.keysArray ? options.keysArray : [];\r\n\r\n        this.encryptionKey = options?.encryptionKey ? options.encryptionKey : 0;\r\n\r\n        this.enforceBigInt = options?.enforceBigInt ? options.enforceBigInt : false;\r\n\r\n        this.makeJSON = options?.makeJSON ? options.makeJSON : false;\r\n    };\r\n\r\n    private clone(): JPDecode<ContextType> {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return new JPDecode({\r\n            extensionCodec: this.extensionCodec,\r\n\r\n            context: this.context,\r\n\r\n            keysArray: this.keysArray,\r\n\r\n            EncryptionKey: this.encryptionKey,\r\n\r\n            fileName: this.fileName,\r\n\r\n            enforceBigInt: this.enforceBigInt,\r\n\r\n            makeJSON: this.makeJSON,\r\n            // TODO may need more\r\n        } as any);\r\n    };\r\n\r\n    /**\r\n     * Basic decoding, will run options that were set in constructor.\r\n     * \r\n     * If passed a string, will assume it is a file path to read the file from.\r\n     * \r\n     * This will trigger a stream like mode where the whole file isn't loaded all at once for larger files.\r\n     * \r\n     * @param bufferOrSourcePath - Buffer of the JamPack data or the file path to a JamPack file.\r\n     */\r\n    public decode(bufferOrSourcePath: Buffer | ArrayLike<number> | Uint8Array<ArrayBufferLike> | ArrayBufferView | ArrayBufferLike | string): unknown {\r\n        if (this.entered) {\r\n            const instance = this.clone();\r\n\r\n            return instance.decode(bufferOrSourcePath);\r\n        }\r\n\r\n        if (typeof bufferOrSourcePath != \"string\") {\r\n            this.setBuffer(bufferOrSourcePath);\r\n        } else {\r\n            this.fileName = bufferOrSourcePath;\r\n\r\n            this.checkFilePath(this.fileName);\r\n        }\r\n\r\n        try {\r\n            this.entered = true;\r\n\r\n            this.reinitializeState();\r\n\r\n            if (this.valueReader == null) {\r\n                throw new Error(\"No value reader set.\");\r\n            }\r\n\r\n            this.stringsList = this.createStringList() as string[];\r\n\r\n            const object = this.doDecodeSync(this.valueReader);\r\n\r\n            if(this.tempCreated){\r\n                (this.valueReader as BiReaderStream).deleteFile(); \r\n            \r\n                this.valueReader.close();\r\n            }\r\n\r\n            if(this.makeJSON){\r\n                return JSON.parse(JSON.stringify(object));\r\n            }\r\n\r\n            return object;\r\n        } catch (err) {\r\n            console.error(err);\r\n\r\n            return;\r\n        } finally {\r\n            this.entered = false;\r\n        }\r\n    };\r\n\r\n    private checkFilePath(filePath: string): void {\r\n        var biTest: BiReaderStream | BiReader = new BiReaderStream(filePath);\r\n\r\n        const testBuffer = biTest.extract(40);\r\n\r\n        biTest.close();\r\n\r\n        biTest = new BiReader(testBuffer);\r\n\r\n        this.testHeader(biTest);\r\n\r\n        biTest.close();\r\n\r\n        if(!this.useStream){\r\n            this.buffer = fs.readFileSync(filePath);\r\n        }\r\n    };\r\n\r\n    private testHeader(br: BiReaderStream | BiReader) {\r\n        const MAGICS = br.uint16;\r\n\r\n        if (!(MAGICS == 0x504A || MAGICS == 0x4A50)) {\r\n            throw new Error(`File magics incorrect. Expecting 0x504A or 0x4A50, but got 0x${MAGICS.toString(16).padStart(4, \"0\")}`);\r\n        }\r\n\r\n        if (MAGICS == 0x4A50) {\r\n            this.endian = \"big\";\r\n        }\r\n\r\n        const V_MAJOR = br.uint8;\r\n\r\n        const V_MINOR = br.uint8;\r\n\r\n        this.HEADER_SIZE = br.uint8;\r\n\r\n        this.LargeFile = br.bit1 as bit;\r\n\r\n        this.Compressed = br.bit1 as bit;\r\n\r\n        this.Crc32 = br.bit1 as bit;\r\n\r\n        this.Encrypted = br.bit1 as bit;\r\n\r\n        this.EncryptionExcluded = br.bit1 as bit;\r\n\r\n        this.KeyStripped = br.bit1 as bit;\r\n\r\n        br.bit1;  // FLAG6\r\n\r\n        br.bit1;  // FLAG7\r\n\r\n        br.uint8;  // RESV_6 FLAG8-15\r\n\r\n        br.uint8;  // RESV_7 FLAG16-23\r\n\r\n        this.VALUE_SIZE = br.uint64;\r\n\r\n        this.STR_SIZE = br.uint64;\r\n\r\n        this.DATA_SIZE = br.uint64;\r\n\r\n        const V_NUMBER = parseFloat(`${V_MAJOR}.${V_MINOR}`);\r\n\r\n        if (V_NUMBER > VERSION_NUMBER) {\r\n            console.warn(`File was encoded in a more advanced version of this package which may cause issues. Package: ${VERSION_NUMBER} - File: ${V_NUMBER}`);\r\n        }\r\n\r\n        if (this.LargeFile && (br.size > MAX_BUFFER || (this.STR_SIZE + this.VALUE_SIZE) > MAX_BUFFER)) {\r\n            this.useStream = true;\r\n        }\r\n\r\n        if (this.EncryptionExcluded && this.encryptionKey == 0) {\r\n            throw new Error('The encryption key is not included in the file and the key was not set in the decoder. Can not decode.');\r\n        }\r\n\r\n        if (this.KeyStripped && this.keysArray.length == 0) {\r\n            throw new Error('The keysArray was removed from the file and not set in the decoder. Can not decode.');\r\n        }\r\n        // extra headers\r\n        if (this.Crc32) {\r\n            this.CRC32 = br.uint32;\r\n        }\r\n\r\n        if (this.Encrypted && !this.EncryptionExcluded) {\r\n            this.encryptionKey = br.uint32;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets up valueReader & strReader. Will decomp and decrypt as well.\r\n     * \r\n     * If a temp file is made, will have to delete after.\r\n     */\r\n    private reinitializeState() {\r\n        if (this.useStream) {\r\n            if (this.fileReader != null) {\r\n                this.fileReader.close();\r\n\r\n                this.fileReader = null;\r\n            }\r\n\r\n            this.compReader = new BiReaderStream(this.fileName);\r\n\r\n            this.compReader.endian = this.endian;\r\n\r\n            this.compReader.open();\r\n\r\n            this.compReader.goto(this.HEADER_SIZE);\r\n\r\n            this.tempCreated = false;\r\n\r\n            if (this.Encrypted) {\r\n                // make comp file without header\r\n                const compWriter = new BiWriterStream(this.fileName + \".comp\");\r\n\r\n                compWriter.unrestrict();\r\n\r\n                compWriter.endian = this.endian;\r\n\r\n                compWriter.open();\r\n\r\n                compWriter.overwrite(this.compReader.read(this.HEADER_SIZE, this.compReader.size - this.HEADER_SIZE), true);\r\n\r\n                compWriter.trim();\r\n\r\n                this.tempCreated = true;\r\n\r\n                this.decrypt(compWriter);\r\n\r\n                compWriter.close();\r\n\r\n                this.compReader = new BiReaderStream(this.fileName + \".comp\");\r\n\r\n                this.compReader.endian = this.endian;\r\n\r\n                this.compReader.unrestrict();\r\n\r\n                this.compReader.open();\r\n            }\r\n\r\n            if (this.Compressed) {\r\n                // check if comp file was made\r\n                if (this.tempCreated) {\r\n                    // compReader should be just the data\r\n                    const tempcompWriter = new BiWriterStream(this.fileName + \".comp.tmp\");\r\n\r\n                    tempcompWriter.endian = this.endian;\r\n\r\n                    tempcompWriter.open();\r\n\r\n                    inflateFileSync(this.compReader, tempcompWriter);\r\n\r\n                    this.compReader.writeMode(true);\r\n\r\n                    this.compReader.gotoStart();\r\n\r\n                    this.compReader.overwrite(tempcompWriter.read(0, tempcompWriter.offset), true);\r\n\r\n                    this.compReader.trim();\r\n\r\n                    this.compReader.writeMode(false);\r\n\r\n                    tempcompWriter.deleteFile();\r\n                } else {\r\n                    // split off header\r\n                    const compWriter = new BiWriterStream(this.fileName + \".comp\");\r\n\r\n                    compWriter.endian = this.endian;\r\n\r\n                    compWriter.open();\r\n\r\n                    compWriter.overwrite(this.compReader.read(this.HEADER_SIZE, this.compReader.size - this.HEADER_SIZE), true);\r\n\r\n                    compWriter.trim();\r\n\r\n                    compWriter.close();\r\n\r\n                    const compReader = new BiReaderStream(this.fileName + \".comp\");\r\n\r\n                    compReader.endian = this.endian;\r\n\r\n                    compReader.unrestrict();\r\n\r\n                    const tempcompWriter = new BiWriterStream(this.fileName + \".comp.tmp\");\r\n\r\n                    tempcompWriter.endian = this.endian;\r\n\r\n                    tempcompWriter.open();\r\n\r\n                    this.tempCreated = true;\r\n\r\n                    inflateFileSync(compReader, tempcompWriter);\r\n\r\n                    compReader.writeMode(true);\r\n\r\n                    compReader.gotoStart();\r\n\r\n                    compReader.overwrite(tempcompWriter.read(0,tempcompWriter.offset), true);\r\n\r\n                    compReader.trim();\r\n\r\n                    compReader.writeMode(false);\r\n\r\n                    tempcompWriter.deleteFile();\r\n\r\n                    this.compReader = compReader;\r\n                }\r\n            }\r\n            if (this.Crc32) {\r\n                const CHUNK_SIZE = 0x2000; // 8192 bytes\r\n\r\n                var crc = 0;\r\n\r\n                var start = this.HEADER_SIZE;\r\n\r\n                if (this.tempCreated) {                    \r\n                    start = 0;\r\n                }\r\n\r\n                this.compReader.goto(start);\r\n\r\n                for (let position = start; position <= this.compReader.size;) {\r\n                    const buffer = this.compReader.read(position, Math.min(CHUNK_SIZE, this.compReader.size - position)) as Buffer;\r\n\r\n                    if (buffer.length == 0) break;\r\n\r\n                    crc = CRC32(buffer, crc);\r\n\r\n                    position += buffer.length;\r\n                }\r\n\r\n                crc = crc >>> 0;\r\n\r\n                if (crc != this.CRC32) {\r\n                    console.warn(`File DID NOT pass CRC32 check, may be corrupt. Expecting ${this.CRC32} but got ${crc}.`);\r\n                }\r\n            }\r\n\r\n            var totalSize = 0n;\r\n\r\n            if (this.tempCreated) {\r\n                totalSize = BigInt(this.compReader.size);\r\n\r\n                this.compReader.open();\r\n\r\n                this.valueReader = new BiReaderStream(this.fileName + \".comp\");\r\n\r\n                this.strReader = new BiReaderStream(this.fileName + \".comp\");\r\n\r\n                this.valueReader.fd = this.compReader.fd;\r\n\r\n                this.valueReader.endian = this.compReader.endian;\r\n\r\n                this.valueReader.size = this.compReader.size;\r\n\r\n                this.valueReader.sizeB = this.compReader.sizeB;\r\n\r\n                this.valueReader.maxFileSize = this.compReader.maxFileSize;\r\n\r\n                this.strReader.fd = this.compReader.fd;\r\n\r\n                this.strReader.endian = this.compReader.endian;\r\n\r\n                this.strReader.size = this.compReader.size;\r\n\r\n                this.strReader.sizeB = this.compReader.sizeB;\r\n\r\n                this.strReader.maxFileSize = this.compReader.maxFileSize;\r\n                \r\n                this.strReader.offset = Number(this.VALUE_SIZE);\r\n            } else {\r\n                totalSize = BigInt(this.compReader.size - this.HEADER_SIZE);\r\n\r\n                this.compReader.open();\r\n\r\n                this.valueReader = new BiReaderStream(this.fileName);\r\n\r\n                this.strReader = new BiReaderStream(this.fileName);\r\n\r\n                this.valueReader.fd = this.compReader.fd;\r\n\r\n                this.valueReader.endian = this.compReader.endian;\r\n\r\n                this.valueReader.size = this.compReader.size;\r\n\r\n                this.valueReader.sizeB = this.compReader.sizeB;\r\n\r\n                this.valueReader.maxFileSize = this.compReader.maxFileSize;\r\n\r\n                this.valueReader.offset = this.HEADER_SIZE;\r\n\r\n                this.strReader.fd = this.compReader.fd;\r\n\r\n                this.strReader.endian = this.compReader.endian;\r\n\r\n                this.strReader.size = this.compReader.size;\r\n\r\n                this.strReader.sizeB = this.compReader.sizeB;\r\n\r\n                this.strReader.maxFileSize = this.compReader.maxFileSize;\r\n\r\n                this.strReader.offset = this.HEADER_SIZE + Number(this.VALUE_SIZE);\r\n            }\r\n\r\n            if (this.VALUE_SIZE + this.STR_SIZE != totalSize) {\r\n                console.warn(`File size DID NOT match headers, may be corrupt. Expecting ${this.VALUE_SIZE + this.STR_SIZE} but got ${totalSize}.`);\r\n            }\r\n        } else {\r\n            if (this.buffer == null) {\r\n                throw new Error(\"Buffer not set\");\r\n            }\r\n\r\n            this.fileReader = new BiReader(this.buffer);\r\n\r\n            this.fileReader.endian = this.endian;\r\n\r\n            this.fileReader.goto(this.HEADER_SIZE);\r\n\r\n            var decomBuffer = this.buffer.subarray(this.HEADER_SIZE, this.buffer.length);\r\n\r\n            this.compReader = new BiReader(decomBuffer);\r\n\r\n            this.compReader.endian = this.endian;\r\n\r\n            if (this.Encrypted) {\r\n                decomBuffer = this.decrypt(null, decomBuffer);\r\n\r\n                this.compReader = new BiReader(decomBuffer);\r\n\r\n                this.compReader.endian = this.endian;\r\n            }\r\n            if (this.Compressed) {\r\n                decomBuffer = inflateBuffer(this.compReader);\r\n\r\n                this.compReader = new BiReader(decomBuffer);\r\n\r\n                this.compReader.endian = this.endian;\r\n            }\r\n            if (this.Crc32) {\r\n                const data = this.compReader.data as Buffer;\r\n\r\n                const crc = CRC32(data, 0) >>> 0;\r\n\r\n                if (crc != this.CRC32) {\r\n                    console.warn(`File DID NOT pass CRC32 check, may be corrupt. Expecting ${this.CRC32} but got ${crc}.`);\r\n                }\r\n            }\r\n\r\n            if (this.VALUE_SIZE + this.STR_SIZE != BigInt(this.compReader.size)) {\r\n                console.warn(`File size DID NOT match headers, may be corrupt. Expecting ${this.VALUE_SIZE + this.STR_SIZE} but got ${this.compReader.size}.`);\r\n            }\r\n\r\n            this.valueReader = new BiReader(this.compReader.extract(Number(this.VALUE_SIZE), true));\r\n\r\n            this.valueReader.endian = this.endian;\r\n\r\n            this.strReader = new BiReader(this.compReader.extract(Number(this.STR_SIZE), true));\r\n\r\n            this.strReader.endian = this.endian;\r\n        }\r\n    };\r\n\r\n    private setBuffer(buffer: Buffer | ArrayLike<number> | ArrayBufferView | ArrayBufferLike): void {\r\n        this.buffer = ensureBuffer(buffer);\r\n\r\n        this.fileReader = new BiReader(this.buffer);\r\n\r\n        this.testHeader(this.fileReader);\r\n\r\n        this.fileReader.close();\r\n\r\n        this.fileReader = null;\r\n    };\r\n\r\n    private createStringList() {\r\n        if (this.strReader == null) {\r\n            throw new Error(\"string reader not set.\");\r\n        }\r\n\r\n        DECODE: while (true) {\r\n            const headByte = this.strReader.ubyte;\r\n\r\n            let object: unknown;\r\n\r\n            if ((headByte >= JPType.ARRAY_0 && headByte <= JPType.ARRAY_15) || // arrays\r\n                (headByte >= JPType.ARRAY8 && headByte <= JPType.ARRAY32)\r\n            ) {\r\n                var size = 0;\r\n\r\n                if (headByte <= JPType.ARRAY_15) {\r\n                    size = headByte - JPType.ARRAY_0;\r\n                } else if (headByte === JPType.ARRAY8) {\r\n                    size = this.strReader.ubyte;\r\n                } else if (headByte === JPType.ARRAY16) {\r\n                    size = this.strReader.uint16;\r\n                } else if (headByte === JPType.ARRAY32) {\r\n                    size = this.strReader.uint32;\r\n                }\r\n\r\n                if (size !== 0) {\r\n                    this.pushArrayState(size);\r\n\r\n                    continue DECODE;\r\n                } else {\r\n                    object = [];\r\n                }\r\n            } else if ((headByte >= JPType.STR_0 && headByte <= JPType.STR_15) || // strings\r\n                (headByte >= JPType.STR8 && headByte <= JPType.STR32)\r\n            ) {\r\n                var size = 0;\r\n\r\n                if (headByte <= JPType.STR_15) {\r\n                    size = headByte - JPType.STR_0;\r\n                } else if (headByte === JPType.STR8) {\r\n                    size = this.strReader.ubyte;\r\n                } else if (headByte === JPType.STR16) {\r\n                    size = this.strReader.uint16;\r\n                } else if (headByte === JPType.STR32) {\r\n                    size = this.strReader.uint32;\r\n                }\r\n\r\n                object = this.strReader.string({ length: size });\r\n            } else {\r\n                throw new Error(`Invalid data in string area. 0x${headByte.toString(16).padStart(2, \"0\")}`);\r\n            }\r\n\r\n            const stack = this.stack;\r\n\r\n            while (stack.length > 0) {\r\n                // arrays\r\n                const state = stack.top()!;\r\n\r\n                if (state.type === STATE_ARRAY) {\r\n                    state.array[state.position] = object;\r\n\r\n                    state.position++;\r\n\r\n                    if (state.position === state.size) {\r\n                        object = state.array;\r\n\r\n                        stack.release(state);\r\n                    } else {\r\n                        continue DECODE;\r\n                    }\r\n                } else {\r\n                    throw new Error('Should only have an array in the string data, found type ' + state.type);\r\n                }\r\n            }\r\n\r\n            return object;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Runs a raw decode on the passed `BiReader`'s Buffer. Return data wherever it ends based on the start value.\r\n     * \r\n     * @param reader - Reader\r\n     * @returns Decoded data\r\n     */\r\n    async doDecodeAsync(reader: BiReader | BiReaderStream): Promise<unknown>{\r\n        try{\r\n            return this.doDecodeSync(reader);\r\n        } catch (err){\r\n            throw new Error(err);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Runs a raw decode on the passed `BiReader`'s Buffer. Return data wherever it ends based on the start value.\r\n     * \r\n     * @param reader - Reader\r\n     * @returns Decoded data\r\n     */\r\n    doDecodeSync(reader: BiReader | BiReaderStream): unknown {\r\n        if (reader == null) {\r\n            throw new Error(\"Value reader not set.\");\r\n        }\r\n\r\n        let object: unknown;\r\n\r\n        DECODE: while (true) {\r\n            const headByte: number = reader.ubyte;\r\n            \r\n            if (headByte < JPType.OBJECT_0) {\r\n                // positive fixint 0x00 - 0x7f\r\n                object = headByte;\r\n            } else if (headByte < JPType.ARRAY_0) {\r\n                // fix object 0x80 - 0x8f\r\n                const size = headByte - 0x80;\r\n\r\n                if (size !== 0) {\r\n                    this.pushObjectState(size);\r\n\r\n                    continue DECODE;\r\n                } else {\r\n                    object = {};\r\n                }\r\n            } else if (headByte < JPType.KEY_0) {\r\n                //fixarray\r\n                const size = headByte - 0x90;\r\n\r\n                if (size !== 0) {\r\n                    this.pushArrayState(size);\r\n\r\n                    continue DECODE;\r\n                } else {\r\n                    object = [];\r\n                }\r\n            } else if (headByte < JPType.STR_0) {\r\n                //fixkey (only used in stripping)\r\n                const index = headByte - 0xA0;\r\n\r\n                if (!this.keysArray[index]) {\r\n                    console.warn(`Did not find key value for index ` + index);\r\n                }\r\n\r\n                object = this.keysArray[index];\r\n            } else if (headByte < JPType.NULL) {\r\n                //fixstr\r\n                const index = headByte - 0xB0;\r\n\r\n                if (this.stringsList[index] === undefined) {\r\n                    console.warn(`Did not find string value for index ` + index);\r\n\r\n                    console.debug(this.stringsList);\r\n                }\r\n\r\n                object = this.stringsList[index];\r\n            } else if (headByte == JPType.NULL) {\r\n                object = null;\r\n            } else if (headByte == JPType.UNDEFINED) {\r\n                object = undefined;\r\n            } else if (headByte == JPType.BOOL_FALSE) {\r\n                object = false;\r\n            } else if (headByte == JPType.BOOL_TRUE) {\r\n                object = true;\r\n            } else if (headByte == JPType.FINISHED ||\r\n                headByte == JPType.UNUSED_C6\r\n            ) {\r\n                return object;\r\n            } else if(headByte == JPType.LIST_END){\r\n                const state = this.stack.top()!;\r\n\r\n                if(state.type != undefined){\r\n                    if(state.type == STATE_ARRAY){\r\n                        object = state.array;\r\n                    } else if(state.type == STATE_OBJECT_KEY || state.type == STATE_OBJECT_VALUE){\r\n                        object = state.object;\r\n                    } else if(state.type == STATE_MAP_KEY || state.type == STATE_MAP_VALUE){\r\n                        object = state.map;\r\n                    }\r\n\r\n                    this.stack.release(state);\r\n                }\r\n\r\n                return object;\r\n            } else if (headByte <= JPType.OBJECT32) {\r\n                // non-fix object\r\n                var size = 0;\r\n\r\n                if (headByte === JPType.OBJECT8) {\r\n                    size = reader.ubyte;\r\n                } else if (headByte === JPType.OBJECT16) {\r\n                    size = reader.uint16;\r\n                } else if (headByte === JPType.OBJECT32) {\r\n                    size = reader.uint32;\r\n                }\r\n\r\n                if (size !== 0) {\r\n                    this.pushObjectState(size);\r\n\r\n                    continue DECODE;\r\n                } else {\r\n                    object = {};\r\n                }\r\n            } else if (headByte === JPType.FLOAT32) {\r\n                object = reader.float;\r\n            } else if (headByte === JPType.FLOAT64) {\r\n                object = reader.doublefloat;\r\n            } else if (headByte === JPType.UINT_8) {\r\n                object = reader.uint8;\r\n            } else if (headByte === JPType.UINT_16) {\r\n                object = reader.uint16;\r\n            } else if (headByte === JPType.UINT_32) {\r\n                object = reader.uint32;\r\n            } else if (headByte === JPType.UINT_64) {\r\n                object = reader.uint64; \r\n                if(this.enforceBigInt){\r\n                    object = BigInt(object as number);\r\n                }\r\n            } else if (headByte === JPType.INT_8) {\r\n                object = reader.int8;\r\n            } else if (headByte === JPType.INT_16) {\r\n                object = reader.int16;\r\n            } else if (headByte === JPType.INT_32) {\r\n                object = reader.int32;\r\n            } else if (headByte === JPType.INT_64) {\r\n                object = reader.int64; \r\n                if(this.enforceBigInt){\r\n                    object = BigInt(object as number);\r\n                }\r\n            } else if (headByte <= JPType.KEY32) {\r\n                // nonfix key\r\n                var index = 0;\r\n\r\n                if (headByte === JPType.KEY8) {\r\n                    index = reader.ubyte;\r\n                } else if (headByte === JPType.KEY16) {\r\n                    index = reader.uint16;\r\n                } else if (headByte === JPType.KEY32) {\r\n                    index = reader.uint32;\r\n                }\r\n\r\n                if (!this.keysArray[index]) {\r\n                    console.warn(`Did not find key value for index ` + index);\r\n                }\r\n\r\n                object = this.keysArray[index];\r\n            } else if (headByte <= JPType.STR32) {\r\n                // non-fix string\r\n                var index = 0;\r\n\r\n                if (headByte === JPType.STR8) {\r\n                    index = reader.ubyte;\r\n                } else if (headByte === JPType.STR16) {\r\n                    index = reader.uint16;\r\n                } else if (headByte === JPType.STR32) {\r\n                    index = reader.uint32;\r\n                }\r\n\r\n                if (this.stringsList[index] === undefined) {\r\n                    console.warn(`Did not find string value for index ` + index);\r\n\r\n                    console.debug(this.stringsList);\r\n                }\r\n\r\n                object = this.stringsList[index];\r\n            } else if (headByte <= JPType.ARRAY32) {\r\n                // non-fix array\r\n                var size = 0;\r\n\r\n                if (headByte === JPType.ARRAY8) {\r\n                    size = reader.ubyte;\r\n                } else if (headByte === JPType.ARRAY16) {\r\n                    size = reader.uint16;\r\n                } else if (headByte === JPType.ARRAY32) {\r\n                    size = reader.uint32;\r\n                }\r\n\r\n                if (size !== 0) {\r\n                    this.pushArrayState(size);\r\n\r\n                    continue DECODE;\r\n                } else {\r\n                    object = [];\r\n                }\r\n            } else if (headByte <= JPType.EXT32) {\r\n                this.hasExtensions = true;\r\n\r\n                var size = 0;\r\n\r\n                if (headByte === JPType.EXT8) {\r\n                    size = reader.ubyte;\r\n                } else if (headByte === JPType.EXT16) {\r\n                    size = reader.uint16;\r\n                } else if (headByte === JPType.EXT32) {\r\n                    size = reader.uint32;\r\n                }\r\n\r\n                const type = reader.ubyte;\r\n\r\n                if(type == JPExtType.Maps){\r\n                    if (size !== 0) {\r\n                        this.pushMapState(size);\r\n\r\n                        continue DECODE;\r\n                    } else {\r\n                        object = new Map();\r\n                    }\r\n                } else if(type == JPExtType.Sets){\r\n                    if (size !== 0) {\r\n                        this.pushSetState(size);\r\n\r\n                        continue DECODE;\r\n                    } else {\r\n                        object = new Set();\r\n                    }\r\n                } else {\r\n                    object = this.decodeExtension(reader, size, type);\r\n                }\r\n            } else if (headByte > JPType.EXT32) {\r\n                // negative fixint\r\n                object = headByte - 0x100;\r\n            } else {\r\n                throw new Error(`Outside of index error 0x${headByte.toString(16).padStart(2, \"0\")}`);\r\n            }\r\n\r\n            const stack = this.stack;\r\n\r\n            while (stack.length > 0) {\r\n                // arrays and maps\r\n                const state = stack.top()!;\r\n                if (state.type === STATE_ARRAY) {\r\n                    state.array[state.position] = object;\r\n\r\n                    state.position++;\r\n\r\n                    if (state.position === state.size) {\r\n                        object = state.array;\r\n\r\n                        stack.release(state);\r\n                    } else {\r\n                        continue DECODE;\r\n                    }\r\n                } else if (state.type === STATE_SET) {\r\n                    state.set.add(object);\r\n\r\n                    state.position++;\r\n\r\n                    if (state.position === state.size) {\r\n                        object = state.set;\r\n\r\n                        stack.release(state);\r\n                    } else {\r\n                        continue DECODE;\r\n                    }\r\n                } else if (state.type === STATE_OBJECT_KEY) {\r\n                    if (object === \"__proto__\") {\r\n                        throw new Error(\"The key __proto__ is not allowed\");\r\n                    }\r\n\r\n                    state.key = this.mapKeyConverter(object);\r\n\r\n                    state.type = STATE_OBJECT_VALUE;\r\n\r\n                    continue DECODE;\r\n                } else if (state.type === STATE_OBJECT_VALUE) {\r\n                    state.object[state.key!] = object;\r\n\r\n                    state.readCount++;\r\n\r\n                    if (state.readCount === state.size) {\r\n                        object = state.object;\r\n\r\n                        stack.release(state);\r\n                    } else {\r\n                        state.key = null;\r\n\r\n                        state.type = STATE_OBJECT_KEY;\r\n\r\n                        continue DECODE;\r\n                    }\r\n                } else if (state.type === STATE_MAP_KEY) {\r\n                    if (object === \"__proto__\") {\r\n                        throw new Error(\"The key __proto__ is not allowed\");\r\n                    }\r\n\r\n                    state.key = this.mapKeyConverter(object);\r\n\r\n                    state.type = STATE_MAP_VALUE;\r\n\r\n                    continue DECODE;\r\n                } else if (state.type === STATE_MAP_VALUE) {\r\n                    // it must be `state.type === State.MAP_VALUE` here\r\n\r\n                    state.map.set(state.key!, object);\r\n\r\n                    state.readCount++;\r\n\r\n                    if (state.readCount === state.size) {\r\n                        object = state.map;\r\n\r\n                        stack.release(state);\r\n                    } else {\r\n                        state.key = null;\r\n\r\n                        state.type = STATE_MAP_KEY;\r\n                        \r\n                        continue DECODE;\r\n                    }\r\n                }\r\n            }\r\n            return object;\r\n        }\r\n    };\r\n\r\n    private pushMapState(size: number) {\r\n        this.stack.pushMapState(size);\r\n    };\r\n\r\n    private pushObjectState(size: number) {\r\n        this.stack.pushObjectState(size);\r\n    };\r\n\r\n    private pushArrayState(size: number) {\r\n        this.stack.pushArrayState(size);\r\n    };\r\n\r\n    private pushSetState(size: number) {\r\n        this.stack.pushSetState(size);\r\n    };\r\n\r\n    private readString(headByte: number) {\r\n        if (this.valueReader == null) {\r\n            throw new Error(\"Value reader not set.\");\r\n        }\r\n\r\n        var value = \"\";\r\n\r\n        if ((headByte >= JPType.STR_0 && headByte <= JPType.STR_15) || // strings\r\n            (headByte >= JPType.STR8 && headByte <= JPType.STR32)\r\n        ) {\r\n            var index = 0;\r\n\r\n            if (headByte <= JPType.STR_15) {\r\n                index = headByte - JPType.STR_0;\r\n            } else if (headByte === JPType.STR8) {\r\n                index = this.valueReader.ubyte;\r\n            } else if (headByte === JPType.STR16) {\r\n                index = this.valueReader.uint16;\r\n            } else if (headByte === JPType.STR32) {\r\n                index = this.valueReader.uint32;\r\n            }\r\n            if (this.stringsList[index] === undefined) {\r\n                console.warn(`Did not find string value for index ` + index);\r\n\r\n                console.debug(this.stringsList);\r\n            } else {\r\n                value = this.stringsList[index];\r\n            }\r\n        }\r\n\r\n        return value;\r\n    };\r\n\r\n    private decodeExtension(valueReader: BiReader | BiReaderStream, size: number, extType :number): unknown {\r\n        let retValue:unknown, data: Buffer, holder: Uint8Array;\r\n\r\n        switch (extType) {\r\n            case JPExtType.Symbol:\r\n                // bool and string\r\n                const global = valueReader.ubyte == JPType.BOOL_TRUE ? true : false;\r\n\r\n                var headByte = valueReader.ubyte;\r\n\r\n                const key = this.readString(headByte);\r\n\r\n                retValue = global ? Symbol.for(key) : Symbol(key);\r\n\r\n                this.symbolList.push(retValue as symbol);\r\n\r\n                break;\r\n            case JPExtType.RegEx:\r\n                // two strings\r\n                const source = this.readString(valueReader.ubyte);\r\n\r\n                const flags = this.readString(valueReader.ubyte);\r\n\r\n                retValue = new RegExp(source, flags);\r\n\r\n                break;\r\n            case JPExtType.Maps:\r\n                // handled before\r\n                break;\r\n            case JPExtType.Sets:\r\n                // handled before\r\n                break;\r\n            case JPExtType.BigUint64Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new BigUint64Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.BigInt64Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new BigInt64Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Float64Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Float64Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Float32Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Float32Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Float16Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n                // not in use yet\r\n                //retValue = new Float16Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Int32Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Int32Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Uint32Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Uint32Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Uint16Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Uint16Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Int16Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Int16Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Int8Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Int8Array(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Uint8Array:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                retValue = new Uint8Array(data);\r\n\r\n                break;\r\n            case JPExtType.Uint8ClampedArray:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                holder = new Uint8Array(data);\r\n\r\n                retValue = new Uint8ClampedArray(holder.buffer);\r\n\r\n                break;\r\n            case JPExtType.Buffer:\r\n                retValue = valueReader.extract(size, true);\r\n\r\n                retValue = Buffer.from(retValue as Buffer);\r\n\r\n                break;\r\n            case JPExtType.Date:\r\n                data = valueReader.extract(size, true) as Buffer;\r\n\r\n                const br = new BiReader(data);\r\n\r\n                br.endian = this.endian;\r\n\r\n                switch (br.size) {\r\n                    case 4: {\r\n                        // timestamp 32 = { sec32 }\r\n                        const sec = br.uint32;\r\n\r\n                        const nsec = 0;\r\n\r\n                        retValue = new Date(sec * 1e3 + nsec / 1e6);\r\n\r\n                        break;\r\n                    }\r\n                    case 8: {\r\n                        // timestamp 64 = { nsec30, sec34 }\r\n                        const nsec30AndSecHigh2 = br.uint32;\r\n\r\n                        const secLow32 = br.uint32;\r\n\r\n                        const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\r\n\r\n                        const nsec = nsec30AndSecHigh2 >>> 2;\r\n\r\n                        retValue = new Date(sec * 1e3 + nsec / 1e6);\r\n\r\n                        break;\r\n                    }\r\n                    case 12: {\r\n                        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n                        const nsec = br.uint32;\r\n                        \r\n                        const sec = Number(br.int64);\r\n\r\n                        retValue = new Date(sec * 1e3 + nsec / 1e6);\r\n                    }\r\n                    default:\r\n                        throw new Error(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${br.size}`);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if(retValue == undefined){\r\n            const data = valueReader.extract(size, true) as Buffer;\r\n\r\n            const br = new BiReader(data);\r\n\r\n            br.endian = this.endian;\r\n\r\n            retValue = this.extensionCodec.decode(br, this, extType, this.context);\r\n        }\r\n\r\n        return retValue;\r\n    };\r\n\r\n    //////////////\r\n    // FINALIZE //\r\n    //////////////\r\n\r\n    private decrypt(br?: BiWriterStream, buffer?:Buffer) {\r\n        const cypter = new Crypt(this.encryptionKey);\r\n\r\n        if (!this.useStream) {\r\n            if(buffer == null){\r\n                throw new Error(\"Buffer to decrypt not set.\");\r\n            }\r\n\r\n            return cypter.decrypt(buffer);\r\n        } else {\r\n            const CHUNK_SIZE = 16;\r\n            \r\n            br.open();\r\n\r\n            br.gotoStart();\r\n\r\n            var buff = Buffer.alloc(0);\r\n\r\n            let bytesToProcess = Number(this.DATA_SIZE);\r\n\r\n            let bytesStart = 0;\r\n\r\n            let bytesRead = 0;\r\n\r\n            do {\r\n                bytesRead = Math.min(CHUNK_SIZE, bytesToProcess);\r\n\r\n                if (bytesRead > 0) {\r\n                    buff = br.read(bytesStart, bytesRead) as Buffer;\r\n\r\n                    bytesToProcess -= buff.length;\r\n\r\n                    const data = cypter.decrypt_block(buff as Buffer);\r\n\r\n                    if(data.length != 0){\r\n                        br.overwrite(data, true);\r\n                    }\r\n\r\n                    bytesStart += buff.length;\r\n                } else {\r\n                    const data = cypter.decrypt_final();\r\n        \r\n                    if(data.length != 0){\r\n                        br.overwrite(data, true);\r\n                    }\r\n\r\n                    bytesToProcess = 0;\r\n                }\r\n            } while (bytesToProcess !== 0);\r\n\r\n            if(!cypter.finished){\r\n                const data = cypter.decrypt_final();\r\n        \r\n                if(data.length != 0){\r\n                    br.overwrite(data, true);\r\n                }\r\n            }\r\n\r\n            br.trim();\r\n\r\n            return Buffer.alloc(0);\r\n        }\r\n    };\r\n}","import fs from \"fs\";\r\nimport { Crypt, CRC32 } from './hash.js';\r\nimport { BiWriter, BiWriterStream } from 'bireader';\r\nimport { JPExtensionCodec, JPExtensionCodecType, JPExtData } from \"./ext.js\";\r\nimport {\r\n    VERSION_MAJOR,\r\n    VERSION_MINOR,\r\n    deflateFileSync,\r\n    deflateBuffer,\r\n    isFloat32Safe,\r\n    endian,\r\n    ubyte,\r\n    uint16,\r\n    uint32,\r\n    JPType,\r\n    JPExtType,\r\n    stringList,\r\n    MAX_BUFFER,\r\n    JPBase,\r\n    ContextOf\r\n} from './common.js';\r\n\r\n/**\r\n * Options for `JPEncode`\r\n */\r\nexport type EncoderOptions<ContextType = undefined> = Partial<\r\n    Readonly<{\r\n        extensionCodec?: JPExtensionCodecType<ContextType>;\r\n        context?: ContextType;\r\n        /**\r\n         * Set the Endianness of the file.\r\n         * \r\n         * Defaults to `little`.\r\n         */\r\n        endian?: endian;\r\n\r\n        /**\r\n         * If you want the file Buffer to be encrypted.\r\n         * \r\n         * The key data to decrypt the file is kept within the file.\r\n         * \r\n         * For extra security you can exclude this key from the file with `stripEncryptKey`.\r\n         * \r\n         * If you do, you must save the `encryptionKey` object number after decoding or you won't be able to decrypt it later.\r\n         * \r\n         * If you can also set your own 32 bit encryption key with `encryptionKey` in options here.\r\n         * \r\n         * Note: It's highly recommended that you also use the `CRC32` to check the file after decryption to make sure the data is correct afterward.\r\n         * \r\n         * Defaults to `false`.\r\n         */\r\n        encrypt?: boolean;\r\n\r\n        /**\r\n         * You can set your own 32 bit encryption key.\r\n         * \r\n         * If you use `stripEncryptKey` you must save this value for later use. Can also be found in the `EncryptionKey` object after encoding.\r\n         * \r\n         * Will be randomly assigned otherwise.\r\n         */\r\n        encryptionKey?: uint32;\r\n\r\n        /**\r\n         * Will remove the encryption key from the file.\r\n         * \r\n         * You must save the `EncryptionKey` object number after decoding or you won't be able to decrypt the file later.\r\n         * \r\n         * Defaults to `false`.\r\n         */\r\n        stripEncryptKey?: boolean;\r\n\r\n        /**\r\n         * Include a CRC32 hash check on the file. Hash is included in the file.\r\n         * \r\n         * Hash can also be found in the `CRC32` object.\r\n         * \r\n         * Defaults to `false`.\r\n         */\r\n        CRC32?: boolean;\r\n\r\n        /**\r\n         * Can futher decrease the file size with zlib.\r\n         * \r\n         * Compression happens first before encrypted.\r\n         * \r\n         * Defaults to `false`.\r\n         */\r\n        compress?: boolean;\r\n\r\n        /**\r\n         * For extra security you can strip all object keys from the data creating a \"schema\" like file.\r\n         * \r\n         * You must save the `keysArray` object after encoding or you won't be able to decode the file later.\r\n         * \r\n         * Defaults to `false`.\r\n         */\r\n        stripKeys?: boolean;\r\n    }>\r\n> &\r\n    ContextOf<ContextType>;\r\n\r\n/**\r\n * Create with `EncoderOptions`\r\n */\r\nexport class JPEncode<ContextType = undefined> extends JPBase {\r\n    private readonly extensionCodec: JPExtensionCodecType<ContextType>;\r\n\r\n    private readonly context: ContextType;\r\n\r\n    private stringList = new stringList();\r\n\r\n    private keyList = new stringList();\r\n\r\n    private depth = 0;\r\n\r\n    ////////////////\r\n    // CONSTANTS  //\r\n    ////////////////\r\n\r\n    /**\r\n     * JP or PJ\r\n     */\r\n    MAGIC: uint16 = 0x504A;\r\n\r\n    /**\r\n     * Endianness. Defaults to ``little``\r\n     */\r\n    endian: endian = \"little\";\r\n\r\n    /**\r\n     * Build verion number to check the file creation params\r\n     */\r\n    get VERSION_MAJOR(): ubyte {\r\n        return VERSION_MAJOR;\r\n    };\r\n\r\n    /**\r\n     * Build verion number to check the file creation params\r\n     */\r\n    get VERSION_MINOR(): ubyte {\r\n        return VERSION_MINOR;\r\n    };\r\n\r\n    /**\r\n     * Set up with basic options\r\n     * \r\n     * @param {EncoderOptions?} encodeOptions - options for encoding\r\n     */\r\n    constructor(encodeOptions?: EncoderOptions<ContextType>) {\r\n        super();\r\n\r\n        this.extensionCodec = encodeOptions?.extensionCodec ?? (JPExtensionCodec.defaultCodec as JPExtensionCodecType<ContextType>);\r\n\r\n        this.context = (encodeOptions as { context: ContextType } | undefined)?.context as ContextType; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\r\n\r\n        this.endian = encodeOptions?.endian ? encodeOptions.endian : \"little\";\r\n\r\n        this.Encrypted = encodeOptions?.encrypt ? 1 : 0;\r\n\r\n        this.EncryptionExcluded = encodeOptions?.stripEncryptKey ? 1 : 0;\r\n\r\n        this.encryptionKey = encodeOptions?.encryptionKey ? encodeOptions.encryptionKey : 0;\r\n\r\n        this.Compressed = encodeOptions?.compress ? 1 : 0;\r\n\r\n        this.KeyStripped = encodeOptions?.stripKeys ? 1 : 0;\r\n\r\n        this.Crc32 = encodeOptions?.CRC32 ? 1 : 0;\r\n    };\r\n\r\n    private clone() {\r\n        // Because of slightly special argument `context`,\r\n        // type assertion is needed.\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return new JPEncode<ContextType>({\r\n            extensionCodec: this.extensionCodec,\r\n\r\n            context: this.context,\r\n\r\n            endian: this.endian,\r\n\r\n            Encrypted: this.Encrypted,\r\n\r\n            EncryptionExcluded: this.EncryptionExcluded,\r\n\r\n            EncryptionKey: this.encryptionKey,\r\n\r\n            Compressed: this.Compressed,\r\n\r\n            KeyStripped: this.KeyStripped,\r\n\r\n            Crc32: this.Crc32,\r\n\r\n            fileName: this.fileName,\r\n\r\n            useStream: this.useStream,\r\n\r\n            valueWriter: this.valueWriter,\r\n\r\n            strWriter: this.strWriter,\r\n\r\n            keysArray: this.keysArray,\r\n\r\n            compWriter: this.compWriter\r\n\r\n            //TODO may need more here\r\n        } as any);\r\n    };\r\n\r\n    /**\r\n     * Basic encode, will run options that were set in constructor.\r\n     * \r\n     * @param {any} object - Data to encode\r\n     * @param {string} filePath - Optional file path to write the file to directly\r\n     * @returns {Buffer}\r\n     */\r\n    public encode(object: unknown, filePath?: string): Buffer {\r\n        if (this.entered) {\r\n            const instance = this.clone();\r\n\r\n            return instance.encode(object, filePath);\r\n        }\r\n\r\n        this.fileName = filePath ? filePath : \"\";\r\n\r\n        if (this.fileName != \"\") {\r\n            this.useStream = true;\r\n        }\r\n\r\n        try {\r\n            this.entered = true;\r\n\r\n            this.reinitializeState();\r\n\r\n            if (this.valueWriter == null || this.strWriter == null) {\r\n                throw new Error(\"Didn't create writers\");\r\n            }\r\n\r\n            this.doEncode(this.valueWriter, object, 1);\r\n\r\n            this.valueWriter.ubyte = JPType.FINISHED;\r\n\r\n            this.valueWriter.trim();\r\n\r\n            this.VALUE_SIZE = this.valueWriter.size;\r\n\r\n            this.writeStringsData();\r\n\r\n            this.strWriter.ubyte = JPType.FINISHED;\r\n\r\n            this.strWriter.trim();\r\n\r\n            this.STR_SIZE = this.strWriter.size;\r\n\r\n            if (this.KeyStripped) {\r\n                this.keysArray = this.keyList.getValues();\r\n            }\r\n\r\n            this.finalizeBuffers();\r\n\r\n            this.headerBuffer = this.buildHeader();\r\n\r\n            if (this.compWriter == null) {\r\n                throw new Error(\"Didn't create writer.\");\r\n            }\r\n\r\n            if (!this.useStream) {\r\n                const compBuffer = this.compWriter.data;\r\n\r\n                return Buffer.concat([this.headerBuffer, compBuffer]);\r\n            } else {\r\n                const fileFile = new BiWriterStream(this.fileName);\r\n\r\n                fileFile.overwrite(this.headerBuffer,true);\r\n\r\n                fileFile.overwrite(this.compWriter.read(0,this.compWriter.size),true);\r\n\r\n                this.compWriter.deleteFile();\r\n                // dummy buffer\r\n                return Buffer.alloc(0);\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n\r\n            return Buffer.alloc(0);\r\n        } finally {\r\n            this.entered = false;\r\n        }\r\n    };\r\n\r\n    private reinitializeState() {\r\n        if (this.useStream) {\r\n            this.valueWriter = new BiWriterStream(this.fileName + \".values\", { extendBufferSize: 2048 });\r\n\r\n            this.valueWriter.endian = this.endian;\r\n\r\n            this.strWriter = new BiWriterStream(this.fileName + \".strings\", { extendBufferSize: 2048 });\r\n\r\n            this.strWriter.endian = this.endian;\r\n        } else {\r\n            this.valueWriter = new BiWriter(Buffer.alloc(2048), { extendBufferSize: 2048 });\r\n\r\n            this.valueWriter.endian = this.endian;\r\n\r\n            this.strWriter = new BiWriter(Buffer.alloc(2048), { extendBufferSize: 2048 });\r\n\r\n            this.strWriter.endian = this.endian;\r\n        }\r\n    };\r\n\r\n    private doEncode(valueWriter:BiWriter|BiWriterStream, object: unknown, depth: number) {\r\n        this.depth = depth;\r\n\r\n        if (object === null) {\r\n            return this.encodeNull(valueWriter);\r\n        } else if (object === undefined) {\r\n            return this.encodeUndefined(valueWriter);\r\n        } else if (typeof object === \"boolean\") {\r\n            return this.encodeBoolean(valueWriter, object);\r\n        } else if (typeof object === \"number\") {\r\n            return this.encodeNumber(valueWriter, object);\r\n        } else if (typeof object === \"string\") {\r\n            return this.encodeString(valueWriter, object, false);\r\n        } else if (typeof object === \"bigint\") {\r\n            return this.encodeBigInt64(valueWriter, object);\r\n        } else if (typeof object === \"symbol\") {\r\n            return this.encodeSymbol(valueWriter, object); // EXT\r\n        } else {\r\n            // if (typeof object === \"object\")\r\n            const ext = this.extensionCodec.tryToEncode(object, this, this.context);\r\n\r\n            if (ext != null) {\r\n                return this.encodeExtension(valueWriter, ext); //EXT\r\n            } else if (Array.isArray(object)) {\r\n                return this.encodeArray(valueWriter, object, this.depth);\r\n            } else if (object instanceof Map) {\r\n                return this.encodeMap(valueWriter, object, this.depth); // EXT\r\n            } else if (object instanceof Set) {\r\n                return this.encodeSet(valueWriter, object, this.depth); // EXT\r\n            } else if (object instanceof RegExp) {\r\n                return this.encodeRegEx(valueWriter, object); // EXT\r\n            } else if (ArrayBuffer.isView(object) || object instanceof Buffer) {\r\n                return this.encodeBinary(valueWriter, object); // EXT\r\n            } else if (object instanceof Date) {\r\n                return this.encodeDate(valueWriter, object); // EXT\r\n            } else if (typeof object === \"object\") {\r\n                return this.encodeObject(valueWriter, object as Record<string, unknown>, this.depth);\r\n            } else {\r\n                // function and other special object come here unless extensionCodec handles them.\r\n                throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\r\n            }\r\n        }\r\n    };\r\n\r\n    //////////////\r\n    // STANDARD //\r\n    //////////////\r\n\r\n    /**\r\n     * Writes an `Object` to the buffer as `Record<string, unknown>`\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @param depth - Level depth within the master object. Leave blank unless you have a reason for adding to running loop.\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeObject(valueWriter: BiWriter|BiWriterStream, object: Record<string, unknown>, depth?: number) {\r\n        if(depth == undefined){\r\n            depth = this.depth;\r\n        }\r\n        \r\n        var length = 1;\r\n\r\n        const keys = Object.keys(object);\r\n\r\n        const size = keys.length;\r\n\r\n        if (size < 16) {\r\n            // fixmap\r\n            valueWriter.ubyte = JPType.OBJECT_0 + size;\r\n        } else if (size < 0x100) {\r\n            // map 8\r\n            valueWriter.ubyte = JPType.OBJECT8;\r\n\r\n            valueWriter.ubyte = size;\r\n\r\n            length++;\r\n        } else if (size < 0x10000) {\r\n            // map 16\r\n            valueWriter.ubyte = JPType.OBJECT16;\r\n\r\n            valueWriter.ushort = size;\r\n\r\n            length += 2;\r\n        } else if (size < 0x100000000) {\r\n            // map 32\r\n            valueWriter.ubyte = JPType.OBJECT32;\r\n\r\n            valueWriter.uint32 = size;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error(`Too large map object: ${size}`);\r\n        }\r\n\r\n        for (const key of keys) {\r\n            const value = object[key];\r\n\r\n            length += this.encodeString(valueWriter, key, true);\r\n\r\n            length += this.doEncode(valueWriter,  value, depth + 1);\r\n\r\n        }\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes an `Array` to the buffer as `Array<unknown>`\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param array - Data to encode\r\n     * @param depth - Level depth within the master object. Leave blank unless you have a reason for adding to running loop.\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeArray(valueWriter:BiWriter|BiWriterStream, array: Array<unknown>, depth?: number) {\r\n        if(depth == undefined){\r\n            depth = this.depth;\r\n        }\r\n\r\n        var length = 1;\r\n\r\n        const size = array.length;\r\n\r\n        if (size < 16) {\r\n            // fixarray\r\n            valueWriter.ubyte = JPType.ARRAY_0 + size;\r\n        } else if (size < 0x100) {\r\n            // uint8\r\n            valueWriter.ubyte = JPType.ARRAY8;\r\n\r\n            valueWriter.ubyte = size;\r\n\r\n            length++;\r\n        } else if (size < 0x10000) {\r\n            // array 16\r\n            valueWriter.ubyte = JPType.ARRAY16;\r\n\r\n            valueWriter.ushort = size;\r\n\r\n            length += 2;\r\n        } else if (size < 0x100000000) {\r\n            // array 32\r\n            valueWriter.ubyte = JPType.ARRAY32;\r\n\r\n            valueWriter.uint32 = size;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error(`Too large array: ${size}`);\r\n        }\r\n\r\n        for (const item of array) {\r\n            length += this.doEncode(valueWriter, item, depth + 1);\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `string` to the buffer's string section.\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param string - Data to encode\r\n     * @param isKey If the string is used a an Object key. Only used when `stripKeys` is enabled.\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeString(valueWriter:BiWriter|BiWriterStream, string: string, isKey?: boolean) {\r\n        if(isKey == undefined){\r\n            isKey = false;\r\n        }\r\n\r\n        var length = 1;\r\n\r\n        if (isKey && this.KeyStripped) {\r\n            const index = this.keyList.add(string);\r\n\r\n            if (index < 16) {\r\n                valueWriter.ubyte = JPType.KEY_0 + index;\r\n            } else if (index < 0x100) {\r\n                // uint8\r\n                valueWriter.ubyte = JPType.KEY8;\r\n\r\n                valueWriter.ubyte = index;\r\n\r\n                length++;\r\n            } else if (index < 0x10000) {\r\n                // unit16\r\n                valueWriter.ubyte = JPType.KEY16;\r\n\r\n                valueWriter.ushort = index;\r\n\r\n                length += 2;\r\n            } else if (index < 0x100000000) {\r\n                // unit32\r\n                valueWriter.ubyte = JPType.KEY32;\r\n\r\n                valueWriter.ushort = index;\r\n\r\n                length += 4;\r\n            } else {\r\n                throw new Error(`String index too long: ${index}`);\r\n            }\r\n        } else {\r\n            const index = this.stringList.add(string);\r\n\r\n            if (index < 16) {\r\n                valueWriter.ubyte = JPType.STR_0 + index;\r\n            } else if (index < 0x100) {\r\n                // uint8\r\n                valueWriter.ubyte = JPType.STR8;\r\n\r\n                valueWriter.ubyte = index;\r\n\r\n                length++;\r\n            } else if (index < 0x10000) {\r\n                // unit16\r\n                valueWriter.ubyte = JPType.STR16;\r\n\r\n                valueWriter.ushort = index;\r\n\r\n                length += 2;\r\n            } else if (index < 0x100000000) {\r\n                // unit32\r\n                valueWriter.ubyte = JPType.STR32;\r\n\r\n                valueWriter.ushort = index;\r\n\r\n                length += 4;\r\n            } else {\r\n                throw new Error(`String index too long: ${index}`);\r\n            }\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `null` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeNull(valueWriter:BiWriter|BiWriterStream) {\r\n        valueWriter.ubyte = JPType.NULL;\r\n\r\n        return 1;\r\n    };\r\n\r\n    /**\r\n     * Writes an `undefined` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeUndefined(valueWriter:BiWriter|BiWriterStream) {\r\n        valueWriter.ubyte = JPType.UNDEFINED;\r\n\r\n        return 1;\r\n    };\r\n\r\n    /**\r\n     * Writes a `boolean` true or false to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - `true` or `false`\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeBoolean(valueWriter:BiWriter|BiWriterStream, object: boolean) {\r\n        if (object === false) {\r\n            valueWriter.ubyte = JPType.BOOL_FALSE;\r\n        } else {\r\n            valueWriter.ubyte = JPType.BOOL_TRUE;\r\n        }\r\n\r\n        return 1;\r\n    };\r\n\r\n    /**\r\n     * Writes an \"finished\" byte to the buffer. End the loop when hit if not finished otherwise.\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeFinished(valueWriter:BiWriter|BiWriterStream){\r\n        valueWriter.ubyte = JPType.FINISHED;\r\n\r\n        return 1;\r\n    };\r\n\r\n    /**\r\n     * Writes a \"list end\" byte to the buffer, useful when pulling loose data and don't want to break the whole loop.\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeListEnd(valueWriter:BiWriter|BiWriterStream){\r\n        valueWriter.ubyte = JPType.LIST_END;\r\n\r\n        return 1;\r\n    };\r\n\r\n    /**\r\n     * Writes a `number` to the buffer . Computes the right byte size base on value.\r\n     * \r\n     * Notes: Use `encodeBigInt64` for `bigint` types.\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param number - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeNumber(valueWriter:BiWriter|BiWriterStream, number: number) {\r\n        var length = 1;\r\n\r\n        if (Number.isSafeInteger(number)) {\r\n            if (number >= 0) {\r\n                if (number < 0x80) {\r\n                    // positive fixint\r\n                    valueWriter.ubyte = number;\r\n                } else if (number < 0x100) {\r\n                    // uint 8\r\n                    valueWriter.ubyte = JPType.UINT_8;\r\n\r\n                    valueWriter.ubyte = number;\r\n\r\n                    length++;\r\n                } else if (number < 0x10000) {\r\n                    // uint 16\r\n                    valueWriter.ubyte = JPType.UINT_16;\r\n\r\n                    valueWriter.ushort = number;\r\n\r\n                    length += 2;\r\n                } else if (number < 0x100000000) {\r\n                    // uint 32\r\n                    valueWriter.ubyte = JPType.UINT_32;\r\n\r\n                    valueWriter.uint = number;\r\n\r\n                    length += 4;\r\n                } else {\r\n                    // uint 64\r\n                    valueWriter.ubyte = JPType.UINT_64;\r\n\r\n                    valueWriter.uint64 = number;\r\n\r\n                    length += 8;\r\n                }\r\n            } else {\r\n                if (number >= -0x20) {\r\n                    // negative fixint\r\n                    valueWriter.byte = number;\r\n                } else if (number >= -0x80) {\r\n                    // int 8\r\n                    valueWriter.ubyte = JPType.INT_8;\r\n\r\n                    valueWriter.byte = number;\r\n\r\n                    length++;\r\n                } else if (number >= -0x8000) {\r\n                    // int 16\r\n                    valueWriter.ubyte = JPType.INT_16;\r\n\r\n                    valueWriter.int16 = number;\r\n\r\n                    length += 2;\r\n                } else if (number >= -0x80000000) {\r\n                    // int 32\r\n                    valueWriter.ubyte = JPType.INT_32;\r\n\r\n                    valueWriter.int32 = number;\r\n\r\n                    length += 4;\r\n                } else {\r\n                    // int 64\r\n                    valueWriter.ubyte = JPType.INT_64;\r\n\r\n                    valueWriter.int64 = number;\r\n\r\n                    length += 8;\r\n                }\r\n            }\r\n\r\n            return length;\r\n        } else {\r\n            return this.encodeNumberAsFloat(valueWriter, number);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Writes a `bigint` to the buffer. Always written as a 64 bit value.\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param bigint - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeBigInt64(valueWriter:BiWriter|BiWriterStream, bigint: bigint) {\r\n        var length = 0;\r\n\r\n        if (bigint >= BigInt(0)) {\r\n            // uint 64\r\n            valueWriter.ubyte = JPType.UINT_64; length++;\r\n\r\n            valueWriter.uint64 = bigint; length += 8;\r\n        } else {\r\n            // int 64\r\n            valueWriter.ubyte = JPType.INT_64; length++;\r\n\r\n            valueWriter.int64 = bigint; length += 8;\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    private encodeStringHeader(byteLength: number) {\r\n        var length = 1;\r\n\r\n        if (this.strWriter == null) {\r\n            throw new Error(\"Didn't create writer.\");\r\n        }\r\n\r\n        if (byteLength < 16) {\r\n            // fixstr\r\n            this.strWriter.ubyte = JPType.STR_0 + byteLength;\r\n        } else if (byteLength < 0x100) {\r\n            // str 8\r\n            this.strWriter.ubyte = JPType.STR8;\r\n\r\n            this.strWriter.ubyte = byteLength;\r\n\r\n            length++;\r\n        } else if (byteLength < 0x10000) {\r\n            // str 16\r\n            this.strWriter.ubyte = JPType.STR16;\r\n\r\n            this.strWriter.uint16 = byteLength;\r\n\r\n            length += 2;\r\n        } else if (byteLength < 0x100000000) {\r\n            // str 32\r\n            this.strWriter.ubyte = JPType.STR32;\r\n\r\n            this.strWriter.uint32 = byteLength;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\r\n        }\r\n        return length;\r\n    };\r\n\r\n    private writeString(object: string) {\r\n        if (this.strWriter == null) {\r\n            throw new Error(\"Didn't create writer.\");\r\n        }\r\n\r\n        const encoder = new TextEncoder();\r\n\r\n        const encodedString = encoder.encode(object);\r\n\r\n        const byteLength = encodedString.length;\r\n\r\n        var length = this.encodeStringHeader(byteLength);\r\n\r\n        this.strWriter.string(object, { length: byteLength });\r\n\r\n        return length + byteLength;\r\n    };\r\n\r\n    private writeStringsData() {\r\n        const array = this.stringList.getValues();\r\n\r\n        const size = array.length;\r\n\r\n        if (this.strWriter == null) {\r\n            throw new Error(\"Didn't create writer.\");\r\n        }\r\n        if (size < 16) {\r\n            // fixarray\r\n            this.strWriter.ubyte = JPType.ARRAY_0 + size;\r\n        } else if (size < 0x100) {\r\n            // uint8\r\n            this.strWriter.ubyte = JPType.ARRAY8;\r\n\r\n            this.strWriter.ubyte = size;\r\n        } else if (size < 0x10000) {\r\n            // array 16\r\n            this.strWriter.ubyte = JPType.ARRAY16;\r\n\r\n            this.strWriter.ushort = size;\r\n        } else if (size < 0x100000000) {\r\n            // array 32\r\n            this.strWriter.ubyte = JPType.ARRAY32;\r\n\r\n            this.strWriter.uint32 = size;\r\n        } else {\r\n            throw new Error(`String array too large: ${size}`);\r\n        }\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            const el = array[i];\r\n\r\n            this.writeString(el);\r\n        }\r\n    };\r\n\r\n    private encodeNumberAsFloat(valueWriter:BiWriter|BiWriterStream, object: number) {\r\n        var length = 1;\r\n\r\n        if (isFloat32Safe(object)) {\r\n            // float 32\r\n            valueWriter.ubyte = JPType.FLOAT32;\r\n\r\n            valueWriter.float = object;\r\n\r\n            length += 4;\r\n        } else {\r\n            // float 64\r\n            valueWriter.ubyte = JPType.FLOAT64;\r\n\r\n            valueWriter.dfloat = object;\r\n\r\n            length += 8;\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    ////////////\r\n    //  EXTS  //\r\n    ////////////\r\n\r\n    private encodeExtension(valueWriter:BiWriter|BiWriterStream, ext: JPExtData) {\r\n        const size = ext.data.length;\r\n\r\n        var length = size;\r\n\r\n        if (size < 0x100) {\r\n            // ext 8\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = size;\r\n\r\n            length += 2;\r\n        } else if (size < 0x10000) {\r\n            // ext 16\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = size;\r\n\r\n            length += 3;\r\n        } else if (size < 0x100000000) {\r\n            // ext 32\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint32 = size;\r\n\r\n            length += 5;\r\n        } else {\r\n            throw new Error(`Too large extension object: ${size}`);\r\n        }\r\n\r\n        valueWriter.ubyte = ext.type;\r\n\r\n        length++;\r\n\r\n        valueWriter.overwrite(ext.data, true);\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `Map` to the buffer as `Map<key, value>`\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @param depth - Level depth within the master object. Leave blank unless you have a reason for adding to running loop.\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeMap<K, V>(valueWriter: BiWriter | BiWriterStream, object: Map<K, V>, depth?: number) {\r\n        if(depth == undefined){\r\n            depth = this.depth;\r\n        }\r\n\r\n        // Note: length here is the array size of Map, not the buffer size\r\n        var length = 1;\r\n\r\n        const keys = [...object.keys()];\r\n\r\n        const size = object.size;\r\n\r\n        if (size < 0x100) {\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = size;\r\n\r\n            length++\r\n        } else if (size < 0x10000) {\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = size;\r\n\r\n            length += 2;\r\n        } else if (size < 0x100000000) {\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint32 = size;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error(`Too large Set length: ${size}`);\r\n        }\r\n\r\n        this.valueWriter.ubyte = JPExtType.Maps; length++;\r\n\r\n        for (const key of keys) {\r\n            const value = object.get(key);\r\n\r\n            length += this.doEncode(valueWriter, key, depth + 1); // keys can have any type here\r\n\r\n            //this.valueWriter.ubyte = JPType.LIST_END; length++;\r\n\r\n            length += this.doEncode(valueWriter, value, depth + 1);\r\n\r\n            //this.valueWriter.ubyte = JPType.LIST_END; length++;\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `Set` to the buffer as `Set<type>`\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @param depth - Level depth within the master object. Leave blank unless you have a reason for adding to running loop.\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeSet<T>(valueWriter: BiWriter | BiWriterStream, object: Set<T>, depth?: number) {\r\n        if(depth == undefined){\r\n            depth = this.depth;\r\n        }\r\n        \r\n        // Note: length here is the array size of Set, not the buffer size\r\n        var length = 1;\r\n\r\n        const size = object.size;\r\n\r\n        if (size < 0x100) {\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = size;\r\n\r\n            length++;\r\n        } else if (size < 0x10000) {\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = size;\r\n\r\n            length += 2;\r\n        } else if (size < 0x100000000) {\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint32 = size;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error(`Too large Set length: ${size}`);\r\n        }\r\n\r\n        this.valueWriter.ubyte = JPExtType.Sets;\r\n\r\n        for (const item of object) {\r\n            length += this.doEncode(valueWriter, item, depth + 1);\r\n\r\n            // this.valueWriter.ubyte = JPType.LIST_END; length++;\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `symbol` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeSymbol(valueWriter: BiWriter | BiWriterStream, object: symbol) {\r\n        const extBuffer = new BiWriter(Buffer.alloc(512));\r\n\r\n        const keyCheck = Symbol.keyFor(object);\r\n\r\n        const global = !!keyCheck;\r\n\r\n        var key = keyCheck ?? object.description;\r\n\r\n        key = key ?? \"\";\r\n\r\n        var length = 0;\r\n\r\n        length += this.encodeBoolean(extBuffer, global);\r\n\r\n        length += this.encodeString(extBuffer, key, false);\r\n\r\n        extBuffer.trim();\r\n\r\n        if(length < 0x100) {\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = length;\r\n        } else if (length < 0x10000) {\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = length;\r\n        } else if (length < 0x100000000) {\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint = length;\r\n        } else {\r\n            throw new Error(`Too large Symbol length: ${length}`);\r\n        }\r\n\r\n        valueWriter.ubyte = JPExtType.Symbol;\r\n\r\n        valueWriter.overwrite(extBuffer.return as Buffer, true);\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `RegEx` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeRegEx(valueWriter: BiWriter | BiWriterStream, object: RegExp) {\r\n        const extBuffer = new BiWriter(Buffer.alloc(512));\r\n\r\n        const src = object.source;\r\n\r\n        const flags = object.flags;\r\n\r\n        var length = 0;\r\n\r\n        length += this.encodeString(extBuffer, src, false);\r\n\r\n        length += this.encodeString(extBuffer, flags, false);\r\n\r\n        extBuffer.trim();\r\n\r\n        if(length < 0x100) {\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = length;\r\n        } else if (length < 0x10000) {\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = length;\r\n        } else if (length < 0x100000000) {\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint = length;\r\n        } else {\r\n            throw new Error(`Too large RegEx length: ${length}`);\r\n        }\r\n\r\n        valueWriter.ubyte = JPExtType.RegEx;\r\n\r\n        valueWriter.overwrite(extBuffer.return as Buffer, true);\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `TypedArray` or `Buffer` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeBinary(valueWriter: BiWriter|BiWriterStream, object: Buffer | ArrayBufferView) {\r\n        var length = 1;\r\n\r\n        const byteLength = object.byteLength;\r\n\r\n        if (byteLength < 0x100) {\r\n            valueWriter.ubyte = JPType.EXT8;\r\n\r\n            valueWriter.ubyte = byteLength;\r\n\r\n            length++;\r\n        } else if (byteLength < 0x10000) {\r\n            valueWriter.ubyte = JPType.EXT16;\r\n\r\n            valueWriter.ushort = byteLength;\r\n\r\n            length += 2;\r\n        } else if (byteLength < 0x100000000) {\r\n            valueWriter.ubyte = JPType.EXT32;\r\n\r\n            valueWriter.uint32 = byteLength;\r\n\r\n            length += 4;\r\n        } else {\r\n            throw new Error('Buffer ranged too large. ' + byteLength);\r\n        }\r\n\r\n        if (object instanceof Buffer) {\r\n            valueWriter.ubyte = JPExtType.Buffer; length++;\r\n\r\n            valueWriter.overwrite(object, true);\r\n\r\n            length += object.length;\r\n        } else {\r\n            if (object instanceof Int8Array) {\r\n                valueWriter.ubyte = JPExtType.Int8Array;\r\n            } else if (object instanceof Uint8Array) {\r\n                valueWriter.ubyte = JPExtType.Uint8Array;\r\n            } else if (object instanceof Uint8ClampedArray) {\r\n                valueWriter.ubyte = JPExtType.Uint8ClampedArray;\r\n            } else if (object instanceof Int16Array) {\r\n                valueWriter.ubyte = JPExtType.Int16Array;\r\n            } else if (object instanceof Uint16Array) {\r\n                valueWriter.ubyte = JPExtType.Uint16Array;\r\n            } else if (object instanceof Int32Array) {\r\n                valueWriter.ubyte = JPExtType.Int32Array;\r\n            } else if (object instanceof Uint32Array) {\r\n                valueWriter.ubyte = JPExtType.Uint32Array;\r\n            } else if (object instanceof Float32Array) {\r\n                valueWriter.ubyte = JPExtType.Float32Array;\r\n                //} else if(object instanceof Float16Array){\r\n                // not active yet\r\n                //    valueWriter.ubyte = JPExtType.Float16Array;\r\n            } else if (object instanceof Float64Array) {\r\n                valueWriter.ubyte = JPExtType.Float64Array;\r\n            } else if (object instanceof BigInt64Array) {\r\n                valueWriter.ubyte = JPExtType.BigInt64Array;\r\n            } else if (object instanceof BigUint64Array) {\r\n                valueWriter.ubyte = JPExtType.BigUint64Array;\r\n            } else {\r\n                throw new Error('Unknown Buffer type.');\r\n            }\r\n\r\n            length++;\r\n\r\n            const uData = new Uint8Array(object.buffer);\r\n\r\n            valueWriter.overwrite(uData, true);\r\n\r\n            length += uData.length;\r\n        }\r\n\r\n        return length;\r\n    };\r\n\r\n    /**\r\n     * Writes a `Date` to the buffer\r\n     * \r\n     * @param valueWriter - Writer\r\n     * @param object - Data to encode\r\n     * @returns The `number` of bytes written\r\n     */\r\n    encodeDate(valueWriter:BiWriter | BiWriterStream, object: Date) {\r\n        const TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\r\n\r\n        const TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\r\n\r\n        const msec = object.getTime();\r\n\r\n        const _sec = Math.floor(msec / 1e3);\r\n\r\n        const _nsec = (msec - _sec * 1e3) * 1e6;\r\n        // Normalizes { sec, nsec } to ensure nsec is unsigned.\r\n        const nsecInSec = Math.floor(_nsec / 1e9);\r\n\r\n        const sec = _sec + nsecInSec;\r\n\r\n        const nsec = _nsec - nsecInSec * 1e9;\r\n\r\n        valueWriter.ubyte = JPType.EXT8;\r\n\r\n        if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\r\n            // Here sec >= 0 && nsec >= 0\r\n            if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\r\n                // timestamp 32 = { sec32 (unsigned) }\r\n\r\n                valueWriter.ubyte = 4;\r\n\r\n                valueWriter.ubyte  = JPExtType.Date;\r\n\r\n                valueWriter.uint32 = sec >>> 0;\r\n\r\n                return 7;\r\n            } else {\r\n                valueWriter.ubyte = 8;\r\n\r\n                valueWriter.ubyte  = JPExtType.Date;\r\n                // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\r\n                const secHigh = sec / 0x100000000;\r\n\r\n                const secLow = sec & 0xffffffff;\r\n                // nsec30 | secHigh2\r\n                valueWriter.uint32 = ((nsec << 2) | (secHigh & 0x3)) >>> 0;\r\n                // secLow32\r\n                valueWriter.uint32 = secLow >>> 0;\r\n\r\n                return 11;\r\n            }\r\n        } else {\r\n            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\r\n            valueWriter.ubyte = 12;\r\n\r\n            valueWriter.ubyte  = JPExtType.Date;\r\n\r\n            valueWriter.uint32 = nsec >>> 0;\r\n\r\n            valueWriter.int64 = sec;\r\n\r\n            return 15;\r\n        }\r\n    };\r\n\r\n    //////////////\r\n    // FINALIZE //\r\n    //////////////\r\n\r\n    /**\r\n     * Creates headers buffer.\r\n     * \r\n     * Note: Must have compressed or encrypted data already.\r\n     * \r\n     * Should be the last thing before completeing the buffer\r\n     * \r\n     * @param {endian} endian \r\n     * @returns \r\n     */\r\n    private buildHeader(endian?: endian): Buffer {\r\n        if (endian) {\r\n            this.endian = endian;\r\n        }\r\n\r\n        if (BigInt(this.HEADER_SIZE) + this.DATA_SIZE > BigInt(0x100000000)) {\r\n            this.LargeFile = 1;\r\n        }\r\n\r\n        const bw = new BiWriter(Buffer.alloc(this.HEADER_SIZE));\r\n\r\n        bw.endian = this.endian;\r\n\r\n        bw.uint16 = this.MAGIC;\r\n\r\n        bw.uint8 = this.VERSION_MAJOR;\r\n\r\n        bw.uint8 = this.VERSION_MINOR;\r\n\r\n        bw.uint8 = this.HEADER_SIZE;\r\n\r\n        bw.bit1 = this.LargeFile;\r\n\r\n        bw.bit1 = this.Compressed;\r\n\r\n        bw.bit1 = this.Crc32;\r\n\r\n        bw.bit1 = this.Encrypted;\r\n\r\n        if (this.Encrypted == 0) this.EncryptionExcluded = 0;\r\n\r\n        bw.bit1 = this.EncryptionExcluded;\r\n\r\n        bw.bit1 = this.KeyStripped;\r\n\r\n        bw.bit1 = 0;  // FLAG6\r\n\r\n        bw.bit1 = 0;  // FLAG7\r\n\r\n        bw.uint8 = 0; // RESV_6 FLAG8-15\r\n\r\n        bw.uint8 = 0; // RESV_7 FLAG16-23\r\n\r\n        bw.uint64 = this.VALUE_SIZE;\r\n\r\n        bw.uint64 = this.STR_SIZE;\r\n\r\n        bw.uint64 = this.DATA_SIZE;\r\n\r\n        if (this.Crc32) {\r\n            bw.uint32 = this.CRC32;\r\n        }\r\n\r\n        if (this.Encrypted && !this.EncryptionExcluded) {\r\n            bw.uint32 = this.encryptionKey;\r\n        }\r\n\r\n        bw.trim();\r\n\r\n        this.headerBuffer = bw.get as Buffer;\r\n\r\n        return this.headerBuffer;\r\n    };\r\n\r\n    private finalizeBuffers() {\r\n        if (this.strWriter == null || this.valueWriter == null) {\r\n            throw new Error(\"Didn't create writers.\");\r\n        }\r\n        if (!this.useStream) {\r\n            this.valueWriter.trim();\r\n\r\n            this.strWriter.trim();\r\n\r\n            const stringData = this.strWriter.data;\r\n\r\n            this.valueWriter.overwrite(stringData,true);\r\n\r\n            this.compWriter = this.valueWriter;\r\n\r\n            this.compWriter.trim();\r\n        } else {\r\n            this.valueWriter.trim();\r\n\r\n            this.strWriter.trim();\r\n\r\n            const compWriter = new BiWriterStream(this.fileName + \".comp\");\r\n\r\n            compWriter.overwrite(this.valueWriter.read(0, this.valueWriter.size), true);\r\n\r\n            compWriter.overwrite(this.strWriter.read(0, this.strWriter.size), true);\r\n\r\n            this.valueWriter.deleteFile();\r\n\r\n            this.strWriter.deleteFile();\r\n\r\n            this.compWriter = compWriter;\r\n\r\n            this.compWriter.trim();\r\n        }\r\n\r\n        if (this.Crc32) {\r\n            this.CRC();\r\n        }\r\n        if (this.Compressed) {\r\n            this.compress();\r\n        }\r\n        if (this.Encrypted) {\r\n            this.encrypt(this.EncryptionExcluded ? true : false, this.encryptionKey == 0 ? undefined : this.encryptionKey);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Can stip or include the key value in file \r\n     * \r\n     * Can also set your own key.\r\n     * \r\n     * @param {boolean?} EncryptionExcluded - remove key from file\r\n     * @param {number?} Encryptionkey - 32 bit number\r\n     */\r\n    private encrypt(EncryptionExcluded?: boolean, Encryptionkey?: number) {\r\n        this.Encrypted = 1;\r\n\r\n        this.EncryptionExcluded = EncryptionExcluded ? 1 : 0;\r\n\r\n        if (this.compWriter == null) {\r\n            throw new Error(\"Writer not created for encryption.\");\r\n        }\r\n\r\n        const cypter = new Crypt(Encryptionkey);\r\n\r\n        this.encryptionKey = cypter.key;\r\n\r\n        if (!this.useStream) {\r\n            const compBuffer = cypter.encrypt(this.compWriter.data as Buffer);\r\n\r\n            this.compWriter = new BiWriter(compBuffer);\r\n\r\n            if (this.HEADER_SIZE + this.compWriter.size > MAX_BUFFER) {\r\n                this.LargeFile = 1;\r\n            }\r\n\r\n            this.DATA_SIZE = this.compWriter.size;\r\n\r\n            return this.DATA_SIZE;\r\n        } else {\r\n            const CHUNK_SIZE = 16; // 16 bytes at a time\r\n\r\n            this.compWriter.gotoStart();\r\n\r\n            var buffer = Buffer.alloc(0);\r\n\r\n            let bytesToProcess = Number(this.DATA_SIZE);\r\n\r\n            let bytesStart = 0;\r\n\r\n            let bytesRead = 0;\r\n\r\n            do {\r\n                bytesRead = Math.min(CHUNK_SIZE, bytesToProcess);\r\n\r\n                if (bytesRead > 0) {\r\n                    buffer = this.compWriter.read(bytesStart, bytesRead) as Buffer;\r\n\r\n                    bytesToProcess -= buffer.length;\r\n\r\n                    const data = cypter.encrypt_block(buffer as Buffer);\r\n\r\n                    if(data.length != 0){\r\n                        this.compWriter.overwrite(data, true);\r\n                    }\r\n\r\n                    bytesStart += buffer.length;\r\n                } else {\r\n                    const data = cypter.encrypt_final();\r\n\r\n                    if(data.length != 0){\r\n                        this.compWriter.overwrite(data, true);\r\n                    }\r\n\r\n                    bytesToProcess = 0;\r\n                }\r\n            } while (bytesToProcess !== 0);\r\n\r\n            if(!cypter.finished){\r\n                const data = cypter.encrypt_final();\r\n\r\n                if(data.length != 0){\r\n                    this.compWriter.overwrite(data, true);\r\n                }\r\n            }\r\n\r\n            this.DATA_SIZE = this.compWriter.size;\r\n\r\n            return this.DATA_SIZE;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Compresses data\r\n     */\r\n    private compress() {\r\n        this.Compressed = 1;\r\n\r\n        if (this.compWriter == null) {\r\n            throw new Error(\"Writer not created for compression.\");\r\n        }\r\n\r\n        if (!this.useStream) {\r\n            this.compWriter.gotoStart();\r\n\r\n            const compBuffer = deflateBuffer(this.compWriter);\r\n\r\n            this.compWriter = new BiWriter(compBuffer);\r\n\r\n            this.compWriter.gotoEnd();\r\n\r\n            this.DATA_SIZE = this.compWriter.size;\r\n        } else {\r\n            const HEADER_SIZE = this.HEADER_SIZE;\r\n\r\n            const temp = this.fileName + \".comp.tmp\";\r\n\r\n            const tempcompWriter = new BiWriterStream(temp);\r\n\r\n            tempcompWriter.open();\r\n\r\n            deflateFileSync(this.compWriter as BiWriterStream, tempcompWriter);\r\n\r\n            this.compWriter.gotoStart();\r\n\r\n            this.compWriter.overwrite(tempcompWriter.read(0,tempcompWriter.offset), true);\r\n\r\n            this.compWriter.trim();\r\n\r\n            this.DATA_SIZE = this.compWriter.size;\r\n\r\n            tempcompWriter.deleteFile();\r\n\r\n            if (HEADER_SIZE + this.compWriter.size > MAX_BUFFER) {\r\n                this.LargeFile = 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates CRC hash\r\n     */\r\n    private CRC() {\r\n        this.Crc32 = 1;\r\n\r\n        if (this.compWriter == null) {\r\n            throw new Error(\"Writer not created for CRC.\");\r\n        }\r\n\r\n        if (!this.useStream) {\r\n            const data = this.compWriter.data as Buffer;\r\n\r\n            this.CRC32 = CRC32(data, 0) >>> 0;\r\n\r\n            return;\r\n        } else {\r\n            let crc = 0;\r\n\r\n            const CHUNK_SIZE = 0x2000; // 8192 bytes\r\n\r\n            for (let position = 0; position <= this.compWriter.size;) {\r\n                const buffer = this.compWriter.read(position, Math.min(CHUNK_SIZE, this.compWriter.size - position)) as Buffer;\r\n\r\n                if (buffer.length == 0) break;\r\n\r\n                crc = CRC32(buffer, crc);\r\n\r\n                position += buffer.length;\r\n            }\r\n\r\n            this.CRC32 = crc >>> 0;\r\n        }\r\n    };\r\n}"],"names":["BiWriter","bufferConstants","BiReaderStream","BiReader","BiWriterStream"],"mappings":"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AAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC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A,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,GAAA,OAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CA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"}